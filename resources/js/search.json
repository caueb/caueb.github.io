[[{"l":"About","p":["\uD83E\uDD1F Passionate about offensive security.\uD83D\uDCCD Western Australia."]},{"l":"Disclaimer","p":["All information contained in this website/blog is provided for educational and research purposes only. The author is not responsible for any illegal use of any information published on the pages of this website."]}],[{"i":"port-80443---web","l":"Port 80/443 - Web"},{"l":"Banner Grabbing"},{"l":"Check WAF"},{"l":"Default pages with interesting info"},{"l":"Scrape website words","p":["Create a wordlist with the words used in the website."]}],[{"l":"Directory Bruteforce"},{"l":"Interesting Wordlists"},{"l":"Extensions","p":["Apache:.php, .asp, .txt, .xml, .bak IIS:.asp, .aspx, ashx, wsdl, wadl, asmx, .xml, .zip, .txt, .ini, .tmp, .bak, .old, .html, .htm"]},{"l":"Gobuster"},{"l":"Dirsearch"},{"l":"Ffuf"},{"l":"Feroxbuster","p":["Recursively brute-force directories."]}],[{"l":"Git Repository"},{"l":"Clone Repository","p":["Or if that simpsons.git file wasn’t exposed we could use wget to get the job done."]},{"l":"Git Dumper","p":["We can use Git-Dumper in case Git-Clone is showing forbidden."]},{"l":"GitTools","p":["This tool can be used to extract .git from local directory as well."]},{"l":"Git Commands"},{"l":"See all branches"},{"l":"See files"},{"l":"See Commit Log history"},{"l":"Check difference with the commit hash"}],[{"l":"Virtual Host"},{"l":"Gobuster"},{"l":"FFUF","p":["First figure out the response length of false positives.","Bruteforce:"]}],[{"l":"Wordpress"},{"l":"Basic Enumeration"},{"l":"Super Scan","p":["--plugins-detection aggresive","--plugins-detection mixed","--plugins-detection passive","-ap","-at","-cb","-p","-u","-vp","-vt","All Plugins","All themes","Argument","Config Backup","Description","It will try to enumerate many things and it might take long.","Plugin detection mode.","Plugin detection mode. Bruteforce","Plugins","Users","Vulnerable Plugins","Vulnerable Themes"]},{"l":"Enumerate users"},{"l":"Bruteforce login with a user and a password list"},{"i":"found-lfi-","l":"Found LFI ?","p":["Try to read Wordpress config file:","More paths to test here."]},{"i":"install-malicious-plugin---webshell","l":"Install Malicious Plugin - WebShell"}],[{"l":"Nmap","p":["Basic Nmap usage in CTF."]},{"l":"Host Discovery"},{"l":"Quick All Ports"},{"l":"Rustscan"},{"l":"UDP"}],[{"i":"port-21---ftp","l":"Port 21 - FTP"},{"l":"Banner Grabbing"},{"l":"Anonymous Login"},{"l":"FTP commands"},{"l":"Download all files from FTP"}],[{"i":"port-25---smtp","l":"Port 25 - SMTP"},{"l":"Banner Grabbing"},{"l":"SMTP"},{"l":"SMTPS"},{"l":"Finding MX servers of an organisation"},{"l":"Username Bruteforce Enumeration","p":["Authentication is not always needed."]},{"l":"Using RCPT TO"},{"l":"Using VRFY"},{"l":"Automatic Tools"},{"l":"Sending Email from Linux console"},{"l":"Swaks"},{"l":"Python Script"}],[{"i":"port-53---dns","l":"Port 53 - DNS"},{"l":"Banner Grabbing","p":["DNS does not have a \"banner\" to grab. The closest equivalent is a magic query for version.bind. CHAOS TXT which will work on most BIND nameservers. You can perform this query using dig:"]},{"l":"Nslookup"},{"l":"Zone Transfer"},{"l":"More info"},{"l":"Finding Subdomains"},{"l":"Bruteforce subdomains"},{"l":"Automated Tools","p":["Tools to automate enumeration Zone Transfer and Domain. Bruteforce to find additional hostnames."]},{"l":"DNSRecon"},{"l":"TheHarvester"},{"l":"Sublist3r"},{"l":"Knockpy"}],[{"i":"port-79---finger","l":"Port 79 - Finger"},{"l":"Banner Grabbing"},{"l":"User Enumeration","p":["Metasploit uses more tricks than Nmap."]},{"l":"Command Execution"}],[{"i":"port-88---kerberus","l":"Port 88 - Kerberus"},{"l":"Enumerate users"},{"l":"Nmap"},{"l":"Kerbrute","p":["After the enumeration of user accounts is finished, we can attempt to abuse a feature within Kerberos with an attack method called ASREPRoasting.","ASReproasting occurs when a user account has the privilege \"Does not require Pre-Authentication\" set. This means that the account does not need to provide valid identification before requesting a Kerberos Ticket on the specified user account."]},{"l":"Retrieving Kerberos Tickets","p":["Impacket has a tool called GetNPUsers.py(located in impacket/examples/GetNPUsers.py) that will allow us to query ASReproastable accounts from the Key Distribution Center. The only thing that's necessary to query accounts is a valid set of usernames which we enumerated previously via Kerbrute."]},{"i":"attempt-to-get-a-list-of-user-service-principal-names","l":"Attempt to get a list of user service principal names:"},{"i":"get-the-hash---tgt-asproastable","l":"Get the Hash - TGT (ASPROASTABLE)"}],[{"i":"port-110995---pop3","l":"Port 110/995 - POP3"},{"l":"Banner Grabbing"},{"i":"automated---nmap","l":"Automated - Nmap"},{"l":"POP Syntax"},{"i":"manual-login-bruteforce-user-enumeration","l":"Manual Login Bruteforce (User enumeration)"},{"i":"automated-bruteforce---hydra","l":"Automated Bruteforce - Hydra"}],[{"i":"port-111---rpc","l":"Port 111 - RPC"},{"l":"Basic enum"},{"l":"NFS shares","p":["If getting permission denied to read files inside the mounted directory, create a user in Kali with the same UID."]},{"l":"Exploit User UID permissions"},{"l":"Enumerate users"},{"l":"Connect with a null-session","p":["Only works for older windows servers."]}],[{"i":"port-139445---smb","l":"Port 139/445 - SMB"},{"l":"Methodology"},{"l":"Enumerate All"},{"l":"Check for vulnerabilities"},{"l":"List Open Shares"},{"l":"List Files in share"},{"l":"Mount a share to browse locally"},{"l":"Connect to SMB share"},{"l":"Get password policy"},{"l":"Bruteforce SMB Login"},{"l":"Download all files from share"},{"l":"WinRM"}],[{"i":"port-143---imap","l":"Port 143 - IMAP"},{"l":"Banner Grabbing","p":["If the server supports NTLM auth (Windows) you can obtain sensitive info (versions):"]},{"l":"Syntax"}],[{"i":"port-161-udp---snmp","l":"Port 161 UDP - SNMP"},{"l":"Basic Enumeration"},{"l":"Capture SNMP traffic sent to server"},{"l":"Install SNMP MIBS to make the output readable"},{"l":"Crack SNMP Passwords"},{"l":"Bruteforce Community String"}],[{"i":"port-389---ldap","l":"Port 389 - LDAP"},{"l":"LDAPSearch","p":["LdapSearch Naming Context Dump:"]},{"l":"LdapSearch Big Dump","p":["Need Naming Context to do big dump:"]},{"l":"Query users in LDAP"},{"i":"extract-hash--crack--connect","l":"Extract hash >> Crack >> Connect"},{"l":"LDAP Domain Dump"}],[{"i":"port-1433---mssql","l":"Port 1433 - MSSQL","p":["Microsoft SQL Server is a relational database management system developed by Microsoft. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications which may run either on the same computer or on another computer across a network (including the Internet)."]},{"l":"Execute Commands"},{"l":"Metasploit"},{"l":"With Credentials"},{"l":"Impacket","p":["You can login into the service using impacket mssqlclient.py."]},{"l":"SQSH"}],[{"i":"port-3306---mysql","l":"Port 3306 - MySQL"},{"l":"Bruteforce"},{"l":"Connect"},{"i":"syntax--commands","l":"Syntax & Commands"}],[{"i":"port-3389---rdp","l":"Port 3389 - RDP"},{"l":"Access Remote Desktop","p":["Connect with known credentials/hash."]},{"l":"WinRM"}],[{"i":"port-59855986---winrm","l":"Port 5985/5986 - WinRM"},{"l":"Enable WinRM","p":["We need to enable it and add any \"victims\" as trusted hosts. From an elevated PowerShell prompt, run the following two commands:"]},{"l":"Connect"}],[{"i":"port-6379---redis","l":"Port 6379 - Redis"},{"l":"Banner Grabbing","p":["The first command you could try is info. It may return output with information of the Redis instance or something like the following is returned:","In this last case, this means that you need valid credentials to access the Redis instance.","If the Redis instance is accepting anonymous connections or you found some valid credentials, you can start enumerating the service with the following commands:"]},{"l":"Dumping Database"},{"l":"Redis RCE","p":["You must know the path of the Web site folder:"]}],[{"i":"subdomain--virtual-host","l":"Subdomain / Virtual Host"},{"i":"osint---ssltls-certificates","l":"OSINT - SSL/TLS Certificates","p":["When an SSL/TLS (Secure Sockets Layer/Transport Layer Security) certificate is created for a domain by a CA (Certificate Authority), CA's take part in what's called \"Certificate Transparency (CT) logs\". These are publicly accessible logs of every SSL/TLS certificate created for a domain name. The purpose of Certificate Transparency logs is to stop malicious and accidentally made certificates from being used.","We can use this service to our advantage to discover subdomains belonging to a domain, sites like https://crt.sh and https://transparencyreport.google.com/https/certificates offer a searchable database of certificates that shows current and historical results.","https://crt.sh","https://transparencyreport.google.com/https/certificates"]},{"i":"osint---search-engines","l":"OSINT - Search Engines"},{"l":"Google","p":["Search for subdomains and exclude www."]},{"i":"osint---tools","l":"OSINT - Tools"},{"l":"Sublist3r"},{"l":"TheHarvester"},{"l":"DNS Bruteforce"},{"l":"Dnsrecon"},{"l":"Knockpy"},{"l":"Virtual Hosts"}],[{"l":"MSFVenom"},{"l":"List Payloads"},{"l":"Windows Payloads"},{"l":"Metasploit Meterpreter Listener"},{"l":"x86"},{"l":"x64"},{"l":"Encode and remove bad chars"},{"l":"Linux Payloads","p":["Web Payloads"]}],[{"l":"Web Payloads"},{"l":"PHP"},{"i":"asp--aspx","l":"ASP / ASPX"},{"l":"JSP"},{"l":"WAR"},{"l":"Ruby"}],[{"l":"SQL Injection"},{"i":"basic---login-bypass","l":"Basic - Login Bypass"},{"l":"User Registration","p":["Usually found in the username field."]},{"l":"Manual SQL Injections"},{"i":"loadread-file","l":"Load/Read File","p":["SQL injection login post:","Example Ippsec Writer."]},{"l":"MongoDB"},{"l":"Type confusion","p":["JSON format","Example: NodeBlog","Bruteforce the password - Python Script"]}],[{"i":"validation---htb-machine","l":"Validation - HTB Machine","p":["http://10.10.11.116/","We can enter any username and select the country to join the competition. Looking in Burp we can play with the parameters.","The web app logic is as follows:","User enter username and select country","A session cookie is generated (MD5) and user is redirected to /account.php","In /account.php the web app takes the user country input to display a list of players"]},{"l":"Finding the SQL Injection","p":["Adding an extra ' in the country value generates an error when /account.php is loaded."]},{"l":"Exploiting the SQL Injection","p":["Dumping the /etc/passwd file:","Uploading a PHP simple RCE (shell.php):"]}],[{"l":"Bruteforce"},{"l":"Hydra"},{"l":"HTTP"},{"l":"FTP"}],[{"l":"File Upload"},{"l":"RCE through image metadata","p":["When upload remember the Content-type: application/x-php."]},{"l":"GIF","p":["Create a file with the GIF magic bytes."]},{"l":"Magic Shell","p":["Merge php code with valid upload file header.","File shell.php:","Merge the magic bytes of a image to shell.php to bypass validation:","Usually the file needs to end in .php to have code execution. However, sometimes the .htaccess is misconfigured and allows .php.jpg to execute code as well.","Why magical-shell.php.jpg can execute code?"]},{"i":"webconfig","l":"Web.config","p":["For old IIS web servers (7.5). You can put ASPX code on the bottom of a web.config file:","See Ippsec Bounty video."]}],[{"i":"jwt-token---key-confusion","l":"JWT Token - Key Confusion","p":["Example Token:","Decoded:"]},{"l":"Vulnerable Code","p":["We see there are 4 functions inside this module and of them is getUser function as expected. getUser function requires username to be passed on and it will query the database to get the data about the username.","If we see the detail, we know that getUser is vulnerable to SQL injection because it takes the username and directly appends to the existing query.","So, this concludes our plan, they want us to modify the JWT and somehow bypass the JWT validation check and use SQL injection to get the information that we need."]},{"i":"exploit-jwt--sql-injection","l":"Exploit JWT + SQL Injection"},{"l":"Tools used","p":["JWT_Forge","Public Key extracted from the original JWT:"]},{"l":"Inject SQL into the username","p":["By using this payload, the current username will be replaced by the first table name. Because the jwt_tool we can not use the “%” sign (somehow it throws an error), therefore we need to improvise a little bit using limit 1 offset x. It also helps to get more information if the table we want is not the first table.","By using this payload, the current username will be replaced by the flag.","Finally, we will query the table and get the flag.","Find the column count","Find the selected column to display","Get the columns","Get the flag","Get the tables","Modify our JWT Token and inject a SQL injection in the username:","Payload:","So I simply put my injection code inside the payload value under the username payload claim/payload key. Below is my injection steps:","This type of information gathering is result-based which means, the behavior can be examined through the output. If the second column is used then it will prints “2” (just because we put number 2 in the second column)","This type of information gathering is true or false based. If the column count is the same, then the query will execute as a normal query, otherwise, it will throw the error message (“SQLite3 error on line ……”)","We need to identify how many columns does the first query select (since it uses * which means all columns).","We need to identify the columns inside the table we want. Every database engine has its own way, this is specific for SQLite3.","We need to identify the tables where we will query the information from. Every database engine has its own way, this is specific for SQLite3.","We need to identify which columns will be fetched and be displayed by the application. For example, the columns might be id, username, and status. When the application prints the username, then we know that the selected column is the second one. This is important for our next move."]}],[{"l":"LFI","p":["Goals:","Try to read internal/local files","Try to read webserver files"]},{"l":"Log Poisoning","p":["If we can access the webserver logs it is possible to get RCE."]},{"l":"Proc Environ Injection","p":["If we get a response like HTTP_USER_AGENT=curl/7.57.0/p /body, we can poison the User Agent header. In Burp, change the request like this:"]},{"l":"PHP Filter to read local files"},{"l":"Windows System Files"},{"l":"Linux Files","p":["More here: https://github.com/D35m0nd142/LFISuite/blob/master/pathtotest.txt"]},{"l":"Apache"},{"l":"LFI to RCE to Shell Trick","p":["This is a combination of LFI and SSRF to RCE."]}],[{"l":"Reverse Shells"},{"l":"Upgrade TTY"},{"l":"Using SOCAT"},{"l":"Using Script"},{"l":"PHP Simple RCE","p":["Trigger: http://10.10.10.x/uploads/rce.php?cmd=whoami"]},{"l":"Other PHP RCE examples"}],[{"l":"Shellshock"},{"l":"Common directories","p":["Search for files with extension: .cgi, .sh"]},{"l":"RCE","p":["Send this on the User-Agent header:","Using Curl:","Using Burp:"]}],[{"l":"SQLmap"},{"l":"Usage"},{"l":"Syntax","p":["--batch","--dbs","--delay=1","--dump","--force-ssl","--os-pwn","--os-shell","--tables","-C","-D","-T","Adds delay in the requests","Argument","Description","Discover database","Dont prompt - Run as default","Dump database","Find tables","If using 443 https","Interactive shell","OOB shell, meterpreter","Select Column","Select database","Select table"]},{"l":"Examples"}],[{"i":"subnet-pivoting--port-forwarding","l":"Subnet Pivoting / Port forwarding"},{"l":"SSHuttle","p":["To access a subnet from a compromised host."]},{"l":"SSH port forward","p":["To access a port listening on the victim localhost."]}],[{"l":"Top Fuzzing Parameters","p":["Top fuzzing parameters."]},{"l":"XSS"},{"l":"SSRF"},{"l":"LFI"},{"l":"SQL Injection"},{"l":"RCE"},{"l":"Open Redirect"}],[{"l":"Web Shells"},{"l":"PHP"},{"l":"Interactive PHP web shell","p":["P0wnyShell"]},{"l":"Simple PHP RCE","p":["Using REQUEST we can use a POST. (POST use less bad characters!)","Bypass file validation with GIF header:"]},{"l":"ASPX"},{"l":"Collections","p":["A collection of webshells to use/upload to webservers: https://github.com/tennc/webshell https://github.com/xl7dev/WebShell"]}],[{"l":"Linux Privesc"},{"i":"os-kernel--hostname","l":"OS, Kernel & Hostname"},{"l":"Users"},{"l":"Network"},{"l":"Try scanning other ports using netcat"},{"l":"SSH tunnel","p":["Example to create a SSH tunnel and access port 80 in 192.168.122.4","Now we can access 127.0.0.1:80."]},{"l":"Processes Running"},{"l":"Installed Packages"},{"l":"Find SUID"},{"l":"World writable scripts invoked as root"},{"l":"World executable folder"},{"l":"World writable and executable folders"},{"i":"find-world-writable-files-in-etc","l":"Find world-writable files in /etc"},{"l":"World-writable directories"}],[{"l":"Big Checklist"},{"l":"Spawn Interactive Shell and set env"},{"l":"Restricted bash"},{"l":"Automated scripts"},{"l":"Check environment"},{"l":"Is there a printer"},{"l":"Check any restricitions on any folders"},{"l":"Check any unmounted drives"},{"l":"Applications and services"},{"i":"jobs--crons","l":"Jobs / CRONS"},{"l":"Network"},{"l":"Cached IPs"},{"l":"USER and Sensitive info"},{"l":"Check for Sensitive info"},{"l":"FileSystem"},{"l":"Check for NFS no root squash on exports","p":["Can be escalated by mounting on local system and writing an suid binary as root, root privs are not squashed"]},{"i":"which-configuration-files-can-be-written-in-etc-able-to-reconfigure-a-service","l":"Which configuration files can be written in /etc/? Able to reconfigure a service?"},{"l":"VAR contents"},{"l":"Check Application logs for sensitive data"},{"l":"Find SUID Files"},{"l":"Writable file and nobody files"},{"l":"Writable by current user"},{"i":"any-script-files-that-we-can-modify","l":"Any script files that we can modify?"},{"i":"any-service-running-by-root","l":"Any service running by root?"},{"l":"Find password"},{"l":"Interesting files"},{"l":"Sqlite DB files"},{"l":"Find all hidden files"},{"l":"Scripts in PATH"},{"l":"Backup files"},{"l":"SUID"},{"i":"is-suid-bit-set-on-these-applications","l":"Is suid bit set on these applications?"},{"l":"Linux capability"},{"l":"Mysql run by root"},{"l":"Docker group"}],[{"l":"Cronjobs","p":["Cron table files (crontabs) store the configuration for cron jobs."]},{"l":"Location","p":["Example:"]},{"l":"File Permission","p":["Cronjobs that run as root and we can write to that directory?","Add a bash reverse shell in the file:"]},{"l":"PATH Environment Variable","p":["The crontab PATH environment variable is by default set to /usr/bin:/bin","If a program/script does not use absolute path create a script with the same name as the cronjob in the first directory the path look for the files.","Example: PATH=/home/user/:/usr/local/sbin:/bin"]},{"l":"Exploit","p":["Make sure the script is executable:","Wait for the cronjob, get a root shell:"]},{"l":"Wildcards","p":["Abusing TAR arguments.","Cronjob file:"]},{"i":"exploit-1","l":"Exploit","p":["Generate a reverse shell using msvenom:","Copy the file to the /home/user directory and make it executable:","Create two files in the /home/user directory:","Start a netcat listener and wait for the cronjob:"]}],[{"l":"Dirty Pipe"},{"l":"Affected versions","p":["Linux kernel versions newer than 5.8 are affected. So far the vulnerability has been patched in the following Linux kernel versions:","5.16.11","5.15.25","5.10.102"]},{"l":"Exploit Repositories"},{"l":"Exploit","p":["Compile using gcc exploit.c -o exploit and run ./exploit. It will overwrite the root password to aaron and sapwn a shell."]},{"i":"su-must-be-run-from-a-terminal","l":"su: must be run from a terminal","p":["If you get this error message: 1 - Login as root with the password aaron. 2 - Then, restore /etc/passwd by running mv /tmp/passwd.bak /etc/passwd"]}],[{"l":"Kernel Exploit"},{"l":"Find the Kernel version"},{"l":"Search for exploits"},{"i":"tool---linux-exploit-suggester","l":"Tool - Linux Exploit Suggester"},{"l":"OS System running"},{"l":"Kernel Version"},{"l":"GCC Compile 32Bit Exploit on 64Bit Kali"}],[{"i":"mysql-4x5x","l":"MySQL 4.x/5.x"},{"l":"Enumerate programs running","p":["Check MySQL configuration:"]},{"l":"Prepare the exploit"},{"l":"Download and compile it","p":["Exploit: https://www.exploit-db.com/exploits/1518"]},{"l":"Create MySQL function"},{"l":"Connect to MySQL"},{"l":"Find the plugins directory"},{"l":"Load the shared object into MySQL"},{"l":"Get root shell"},{"l":"Execute rootbash shell"}],[{"l":"NFS","p":["Check the contents of /etc/exports for shares with the no_root_squash option:","No_root_squash means that we can write as root user to that location.","Confirm that the NFS share is available for remote mounting:"]},{"l":"Exploit","p":["Create a mount point on your local machine and mount the /tmp NFS share:","Using the root user on your local machine, generate a payload and save it to the mounted share:","Make sure the file has the SUID bit set, and is executable by everyone:","On the target machine, execute the file to get a root shell:"]}],[{"i":"port-forwarding---ssh","l":"Port Forwarding - SSH","p":["To forward a port open internally in the victim machine to our local machine."]},{"l":"Usage"},{"l":"Find the open ports"},{"l":"Example MySQL"},{"l":"In the local machine access the port"}],[{"l":"Pwnkit","p":["Polkit (formerly PolicyKit) is a component for controlling system-wide privileges in Unix-like operating systems. It provides an organized way for non-privileged processes to communicate with privileged processes. It is also possible to use polkit to execute commands with elevated privileges using the command pkexec followed by the command intended to be executed (with root permission)."]},{"l":"Linux distributions","p":["Distribution","Vulnerable?","RHEL 7","No","RHEL 8","Yes","Fedora 20 (or earlier)","Fedora 21 (or later)","Debian 10 (“buster”)","Debian testing (“bullseye”)","Ubuntu 18.04","Ubuntu 20.04"]},{"l":"Exploit"},{"l":"Compiling","p":["https://github.com/ly4k/PwnKit","https://github.com/arthepsy/CVE-2021-4034"]},{"l":"In Python","p":["https://github.com/ravindubw/CVE-2021-4034","https://github.com/joeammond/CVE-2021-4034"]},{"l":"Bash","p":["https://github.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation"]}],[{"l":"SSH"},{"l":"Check if we can login as root"},{"l":"Have access to ssh private key","p":["Copy the key to our local computer."]},{"i":"generate-a-publicprivate-ssh-key-pair","l":"Generate a public&private ssh key pair","p":["Add our public ssh key to authorized_keys file."]}],[{"l":"Sudo"},{"l":"Vulnerable Versions","p":["Get sudo version"]},{"i":"sudo--1828","l":"Sudo < 1.8.28"},{"i":"cve-2021-3156-sudo-baron-samedit","l":"CVE-2021-3156 (Sudo Baron Samedit)","p":["Affects all legacy versions from 1.8.2 to 1.8.31p2 and all stable versions from 1.9.0 to 1.9.5p1 in their default configuration."]},{"i":"cve-2021-3156---sudo-1831-no-bruteforce","l":"CVE-2021-3156 - Sudo 1.8.31 (no bruteforce)"},{"l":"Apache as sudo","p":["If we can run Apache as sudo, use apache2 to read /etc/shadow file:"]},{"l":"Environment Variable"},{"l":"LD_PRELOAD","p":["Create the exploit:","Compile:","Run any allowed program using sudo and the shared object created:"]},{"l":"LD_LIBRARY_PATH","p":["Select one shared object to replace (one that sudo can run):","Create the exploit:","Compile:","Run any allowed program using sudo and the shared object created:"]}],[{"l":"SUID"},{"l":"Find SUID files","p":["Search on GTFOBins for exploitation: https://gtfobins.github.io/","Use searchsploit: searchsploit suidprogram 2.3"]},{"l":"Shared Object","p":["Use strace to find the shared objects not found.","In the result above, the program is trying to load a shared object from the user directory.","1 - Create the directory /home/user/.config 2 - cd into .config directory 3 - create the shared object libcalc.so","Compile:","Execute the SUID file to gain root shell:"]},{"l":"PATH Environment Variable","p":["We create a reverse shell embedded into a program with the same name as one of the programs used by the SUID programs.","For example:","/usr/bin/mysuidprogram is a program that start an apache server using the string service apache start. We could then create a file named service located in our user home directory and append the /home/user directory to the PATH variable.","The computer will call /home/user/service before /usr/bin and spawn a root reverse shell."]},{"i":"finding-vulnerable-programs-in-suid","l":"Finding vulnerable programs (in SUID)","p":["Create the exploit:","Compile:","Prepend the current directory to the PATH directory:"]},{"l":"Old Bash","p":["Versions < 4.2-048 are vulnerable to path attack.","Versions < 4.4 inherit the PS4 env variable."]}],[{"l":"Weak Files Permissions"},{"i":"writable-etcshadow","l":"Writable /etc/shadow"},{"i":"writable-etcpasswd","l":"Writable /etc/passwd"},{"i":"a-generate-a-new-password","l":"a) Generate a new password"},{"i":"b-generate-a-new-root-user","l":"b) Generate a new root user"}],[{"l":"Big Checklist"},{"l":"System Enum"},{"l":"Updates"},{"l":"Applications"},{"l":"Services"},{"l":"Disk Volume"},{"i":"drivers---in-powershell","l":"Drivers - in powershell"},{"l":"User enum"},{"i":"network--firewall--av--defender","l":"Network / Firewall / AV / Defender"},{"l":"Checklist automated tools"},{"l":"Check folder permissions"},{"l":"Running processes to started services"},{"l":"Windows services that are started"},{"l":"Look for 3rd party drivers"},{"i":"check-if-wmic-is-allowed-on-low-priv-shell-mostly-allowed-on-win7-win8","l":"Check if WMIC is allowed on low priv shell. Mostly allowed on Win7 /win8"},{"l":"Check directory permissions"},{"l":"Scheduled Tasks"},{"l":"Startups and autoruns"},{"l":"Service Permissions"},{"l":"Check if service config can be modified"},{"l":"Unquoted Service Path"},{"l":"AlwaysInstallElevated","p":["IF 64 bits use: %SystemRoot%\\Sysnative\\reg.exe"]},{"l":"Service only available from inside"},{"l":"Password in files"},{"l":"Unattended config"},{"l":"Registry"},{"l":"VNC"},{"l":"Windows autologin"},{"l":"SNMP Paramters"},{"l":"Putty"},{"l":"Search for password in registry"},{"l":"REGSVC ACL"},{"l":"Unquoted Service Path Exploitation"},{"i":"case-1-seshutdownprivilege-is-listed-when-checked-whoami-priv","l":"Case 1, SeShutdownPrivilege is listed when checked whoami /priv"},{"i":"case-2-seshutdownprivilege--disabled-we-have-service_stopservice_start-privilege-on-a-service","l":"Case 2, SeShutdownPrivilege = Disabled, we have (service_stop,service_start) privilege on a service"},{"l":"Weak service permissions Exploitation"},{"l":"Weak Registry Permissions Exploitation"},{"l":"Weak Service Executable File Permissions Exploitation"},{"l":"AlwaysInstallElevated privilege Escalation"},{"l":"DLL hijacking"},{"l":"Stored credentials"},{"l":"Files that may contain passwords"},{"l":"Find all weak folder permissions per drive"},{"l":"Find all weak file permissions per drive"}],[{"l":"Potatoes"},{"l":"Affected Windows Versions"},{"l":"Juicy Potato","p":["Requirements: SeImpersonatePrivilege or/and SeAssignPrimaryTokenPrivilege enabled."]},{"l":"Find a CLSID","p":["https://github.com/ohpe/juicy-potato/tree/master/CLSID/Windows_10_Pro","http://ohpe.it/juicy-potato/CLSID/Windows_10_Pro/"]},{"i":"exploit---get-a-netcat-reverse-shell","l":"Exploit - Get a netcat reverse shell"},{"i":"exploit---downloadrun-a-malicious-script-as-administrator","l":"Exploit - Download&Run a malicious script as Administrator"},{"l":"Print Spoofer","p":["Requirements: SeImpersonatePrivilege enabled.","Tested on: Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2019."]},{"i":"exploit---run-powershell-as-administrator","l":"Exploit - Run Powershell as Administrator"}],[{"l":"Quick Wins"},{"l":"Run Powershell"},{"l":"PowerShell History"},{"l":"User Enumeration"},{"l":"OS Enumeration"},{"l":"Hot Fixes"},{"l":"Open Ports"},{"l":"Check Firewall"},{"l":"Find Passwords"},{"l":"In the registry"},{"l":"Autologin"},{"l":"RunAS"},{"l":"AlwaysElevated"}],[{"l":"Service Exploit","p":["DOWNLOAD ACCESSCHK.EXE http://live.sysinternals.com/accesschk.exe"]},{"l":"Check if User can modify a service","p":["If the group Authenticated users has SERVICE_ALL_ACCESS in a service, then it can modify the binary that is being executed by the service.","To modify it and execute netcat you can do:"]},{"l":"Insecure Service Permissions","p":["If you can change config, the easies way to privesc is change BINARY PATH to the location of a reverse shell EXE."]},{"l":"Weak Registry Permissions"}],[{"l":"Unquoted Service Path","p":["Example: C:\\Program Files\\Application ABC\\Common Files\\app.exe","When the service start Windows will check for:","C:\\Program.exe","C:\\Program Files\\Application.exe","C:\\Program Files\\Application ABC\\Common.exe","Before using the full path to C:\\Program Files\\Application ABC\\Common Files\\app.exe","If we can create any o this files with a reverse shell it’s a win!"]}],[{"l":"Windows Tricks"},{"l":"PowerShell encoded base64","p":["Create a base64 payload to avoid bad characters."]},{"i":"run-command-as-user-with-creds","l":"Run command as User (with creds)"},{"l":"List running process with args"},{"l":"Scan for hosts and open ports in subnet"},{"l":"PowerShell"},{"l":"Search for files"},{"l":"Windows Security"},{"l":"Disable Firewall"},{"l":"Disable AMSI"},{"l":"Disable Defender"},{"l":"Execution Policy"},{"l":"Add a RDP user"}],[{"l":"ASPREPRoast AD"}],[{"l":"BloodHound"},{"l":"Install"},{"l":"Usage"}],[{"i":"bloodhoundpy","l":"BloodHound.py"},{"l":"Get the domain and host name"},{"l":"Enumerate usernames"},{"l":"Create usernames","p":["Create a file with the names of staff → names.txt:","Python script to create usernames based on names.txt:","Just run: python script.py names.txt","It will create a list of usernames combining the Name and Lastname."]},{"l":"Check for valid usernames with kerbrute","p":["You need to be time sync with the target:","Bruteforce usernames using kerbrute:"]},{"l":"Password spray with kerbrute"},{"l":"More enumeration using credentials"},{"l":"Bloodhound Python","p":["Install:","Usage:","Start Neo4j:"]},{"l":"Bloodhound","p":["https://github.com/BloodHoundAD/BloodHound","Download the latest release","Go to Upload Data: Import the .json files create by Bloodhound.py.","FIND KERBEROASTABLE ACCOUNTS BloodHound: ANALYSIS → QUERIES","Find all Domains Admins","Mark users as high value if not yet","List all Kerberoastable Accounts ( Found web-svc account.)","Use credentials and impacket to extract the hash of Kerberoastable users:","Crack the hash:","If password is cracked, mark the web-svc user as OWNED and run the queries again."]}],[{"l":"Dump Hashes"},{"l":"Using SMB"},{"l":"Powershell"}],[{"l":"Port Forwarding"},{"l":"Chisel","p":["Example in how to expose port 4444 found in Windows machine to local 9001:"]}],[{"l":"Post Exploitation"},{"l":"Mimikatz","p":["Post exploitation commands must be executed from SYSTEM level privileges."]},{"i":"ad---powerview","l":"AD - PowerView"}],[{"l":"Transfer Files"},{"l":"SMB Share"},{"l":"Powershell"},{"l":"Base64 encoded file"}],[{"l":"Cracking"},{"l":"Search-That-Hash"},{"l":"Hashcat"},{"l":"Common hashes","p":["-m 0","-m 1000","-m 1500","-m 1600","-m 1800","-m 300","-m 400","-m 500","DES(unix)","Hash","md5 raw","md5(apr)","md5crypt","Mode","Mysql4.0/5","NTLM","sha512crypt","wordpress"]},{"l":"Custom wordlist","p":["Create a custom wordlist based on words and hashcat rules."]},{"l":"John The Ripper"},{"l":"Linux passwords"},{"l":"Crack Files"},{"l":"ZIP files"},{"i":"ssh-id_rsa","l":"SSH (id_rsa)"},{"l":"PDF"},{"i":"pgp-message--key","l":"PGP MESSAGE & KEY","p":["Identification & Syntax","Import the PGP PRIVATE KEY into our machine:","Crack:","After importing the private key, we can use it to decode PGP messages:"]},{"l":"PFX","p":["Using John (FASTER):","Using pkcs12:","Now we can import the .pfx certificate using the password on Firefox to access internal resources."]}],[{"l":"XSS"},{"i":"reflected-xss---basic","l":"Reflected XSS - Basic"},{"i":"reflected-xss---filter-evasion","l":"Reflected XSS - Filter Evasion"},{"l":"Stored XSS"},{"l":"Data grabber for XSS","p":["Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page.","Write the collected data into a file."]},{"l":"Javascript keylogger","p":["Another way to collect sensitive data is to set a Javascript keylogger."]},{"l":"Password changer","p":["Redirects the user to a password change when it visits the page."]},{"l":"SSRF via XSS"},{"l":"Load external scripts via JS","p":["Send the payload:","Script hosted on attacker machine to get local files, and POST back to attacker:"]},{"l":"Local files using PHP redirection","p":["Send the payload:","File hosted on attacker machine - Redirect to local file:","Many more payloads at PayloadAllTheThings"]}],[{"l":"Deploy Elastic on Raspberry Pi"},{"l":"Intro","p":["A while ago I started to study malware development and decided to build some sort of home lab where I could test my code and techniques I learn against an EDR.","The EDR of choice was Elastic for multiple reasons:","Easy to deploy","Free 30-day trial with advanced detection features","Good reputation","I figure out that I would need at least 3 machines to simulate an attack/defense playground:","1 x Attacker machine","1 x Target machine","1 x EDR machine","Given that my personal computer has limited resources, I could not run 3 virtual machines at the same time as it would crash. To take some of the load, I decided to use my dusty Raspberry Pi 4 to run the EDR. I ended up with the setup as shown below:","This post is a step-by-step to get Elastic EDR (I will be using docker) up and running on a Raspberry Pi 4. Additionally, I will show how to install an agent enroling a machine in the EDR fleet.","This tutorial will also work for deploying Elastic on default Ubuntu or any other Debian based Linux machine. If that is your case, skip the Installing Ubuntu on a Raspberry Pi section."]},{"l":"Installing Ubuntu on a Raspberry Pi","p":["Download the Ubuntu image for Raspberry Pi from the official Ubuntu website.","Use the Raspberry Pi Imager to install the downloaded OS image into the SD card.","If you need a guide to install Ubuntu on Raspberry Pi, Nicholas Xuan Nguyen posted a detailed step-by-step tutorial here."]},{"l":"Installing Docker","p":["We will be using Docker to install and run Elasticsearch, Kibana, and Fleet. This way we avoid many of the burdens installing and configuring dependencies.","The commands below are just a compilation of the Docker documentation:"]},{"l":"Installing elastic-container","p":["Now that Docker was installed, we can move on to install Elastic. We will be using a project created by Andrew Pease called “elastic-container”. I really like how easy it is to get everything working.","Next, change into the elastic-container/ folder and open the .env file using your favorite text editor:","Change the default password of “changeme” - Lines 11, 14.","Bulk enable detection rules for Windows setting WindowsDR=1- Line 22.","Change the license type from basic to trial- Line 30. Elastic provide advanced detection features for a 30-day trial.","Make the shell script executable by running chmod +x elastic-container.sh. Start the elastic-container running sudo ./elastic-container start.","It may take a few minutes to download and setup all containers.","At the end of this process you will have Elasticsearch, Kibana, Fleet, and the Detection Engine all pre-configured, enabled and ready to use. To access Elastic dashboard, browse to https://localhost:5601 or https://RaspberryPi-IP:5601. You may be presented a browser warning due to the self-signed certificates. Use the username elastic and the password you changed to in the previous steps."]},{"l":"Enroll the target machine","p":["Add a name in the “Integration name”.","After a few minutes, the target machine should appear in the “Agents” list with the status of healthy. Next step is to setup the integrations for the agent policy we applied. Click in the target machine agent policy name, and next, click in “Add integration” button.","Back to the “Agents” tab, let’s enroll our target machine. Click in the “Add agent” button. We need to create a policy for this agent, choose a name and click in “Create policy”.","Before enrolling any machine to the fleet we need to modify a couple settings. Go to “Settings” tab and verify if the Output URL is pointing to the Raspberry Pi IP address.","Bulk actions: Enable","Click “Save and continue”.","Click in Select all 860 rules","In the next screen, click in “Add Elastic Defend”.","Lets install “Elastic Defend” integration.","Make sure “Enroll in Fleet” is selected, then in step 3 select the “Windows” version of the agent and below is the code we need to run in our target machine to install the agent. There is only one modification we need to do here. We need to append the flag --insecure to the last command since we are using self-signed certificates, for example:","Next:","Note 1: Some of the rules may fail, that is ok, they require other integrations that we did not install. Note 2: Enabling all rules will generate a lot of alerts, therefore, a lot of “noise” for the SOC. This is an unrealistic scenario as it would overwhelm the SOC operators with false positives, but we want to check for every single prevention/detection during our tests.","Now everything is ready, you may head to Security → Alerts to see any suspicious activity caught by Elastic.","Now we can enroll the “target” machine into the Elastic Fleet. This will install an agent on the target machine that will monitor and collect the logs and send it back to Kibana.","Open a Powershell terminal as Administrator on the target machine and run the commands.","Select the agent policy we created.","Select the type of protection, I will go with “Complete EDR” (Note that we will have only 30-days trial to use Essential and Complete EDR).","The last thing we need to do is to setup the alert rules. Use the menu on the left and browse to Security → Alerts. Click in the “Manage rules” button.","The last thing, click in the pencil icon under Actions to edit the settings of the Output. If not yet, enter ssl.verification_mode: none in the Advanced YAML configuration. We need this since we are using self-signed certificates, otherwise it will error.","Under the “Installed Rules” tab, we can enable all rules.","Use the menu on the left and browse to Mangement → Fleet."]},{"l":"Shutting down Elastic containers","p":["You can use the following command to stop the elastic containers. This command will not uninstall Elastic, it just stop the containers running in the Raspberry Pi. I usually turn it off when I’m done with my tests.","The following command will re-start the containers:"]}],[{"i":"early-bird---edge-case","l":"Early Bird - Edge case"},{"l":"Intro","p":["In a recent red team lab - Vulnlab- I had the challenge to establish initial access via phishing. Basically, after compromising an IT department email account, I had to send a phishing email targeting another account which was expecting to receive the \"HR Tool\". The target machine is running Elastic EDR agent and the goal was to evade detection and gain a foothold.","My initial thoughts were to create a program that uses of the Early Bird technique to spawn a new instance of MS Edge and inject a reverse shell shellcode. The reason to pick Edge as the target process is because security products can easily detect anomalous network connections, for example, it would be very suspicious if Notepad.exe process starts sending HTTP/S packets every 30s."]},{"l":"The current directory issue","p":["I wanted to spawn an instance of MS Edge as close to the original as possible to avoid detection. Here is how a legitimate msedge.exe process looks like in Process Hacker:","When using CreateProcessA API or even the low-level NtCreateUserProcess we can specify the parameters and attributes for the process, such as the \"Image file name\", \"Command line\", even spoof the parent process. However, the one that was challenging to get it right was the \"Current directory\" since it contains the full path + version installed of Edge. I don't know what version is installed in the target. If we don’t specify anything and pass the NULL value, it will be populated with the current directory where the program was initiated: Note: I am also spoofing the parent process as you can see it is showing as child of explorer.exe.","See below a snippet of the code for spawning msedge.exe without specifying the \"Current directory\":","On the other hand, if we specify the wrong directory, it will fail and the program will likely crash."]},{"l":"Fetching Edge version from the registry","p":["To solve this issue we need to retrieve the Edge version installed in the target system, concatenate with the path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\ and pass as the value for the current directory when spawning an instance of msedge.exe.","There are a few ways to do that, I decided to fetch the registry. We can find the Edge version installed under HKEY_CURRENT_USER\\Software\\Microsoft\\Edge\\BLBeacon registry, in the version key.","Building a POC to retrieve Edge version from the registry:","Compile and run the code above, we can verify that it is working:"]},{"l":"Parent process spoofing rule bypass","p":["When I thought I was done, Elastic was detecting the parent process spoofing. Luckily, we can have a look at Elastic detection rules for PPID spoofing on Github. That is when I saw this on line 91:","It seems that if msedge.exe has 2 or more arguments and parent is sihost.exe then we are good to go. I modified the \"Command line\" value and changed the parent process from explorer.exe to sihost.exe:","Looks exactly what we need to get that initial foothold in the red team lab.","The full code for the POC above can be found on my Github repo here."]},{"l":"Final adjustments","p":["After doing these modifications I successfully got my initial foothold and a reverse shell running under msedge.exe.","CloseHandle","CreateProcessA","For my final code I replaced most of the Windows API calls with indirect syscalls using HellsHall.","Here is a list of the APIs to replace from the POC:","NtAllocateVirtualMemory","NtClose","NtCreateUserProcess","NtOpenProcess","NtOpenProcessToken","NtProtectVirtualMemory","NtQueueApcThread","NtResumeThread","NtWriteVirtualMemory","OpenProcess","OpenProcessToken","POC WinAPI","QueueUserAPC","ResumeThread","Syscall","VirtualAllocEx","VirtualProtectEx","WriteProcessMemory"]}],[{"i":"mockingjay---byodll","l":"Mockingjay - BYODLL"},{"l":"Intro","p":["In June 2023, cybersecurity researchers at Security Joes raised the alert for a new process injection technique called Mockingjay which would be able to evade traditional EDR. The technique consists of abusing default RWX (Read-Write-Execute) sections in a DLL to execute arbitrary code on compromised systems. Security tools such as EDR will often place hooks and monitor for specific Windows APIs calls to decide if a process is malicious. For example, the most common APIs used for process injection are:","API","Description","VirtualAlloc","This API is used to allocate memory within the process's address space. In self-injection, it's used to allocate memory to hold the payload.","RtlMoveMemory","While not an official API, this is a memory copy operation used to copy the payload code into the allocated memory.","VirtualProtect","This API is used to change the protection attributes of a memory region. It's often used after allocating memory to make it executable, allowing the payload code to be executed.","CreateThread","This API is used to create a new thread within the process. It's often used to start the execution of the payload entry point.","One of the reasons why Mockingjay successfully evades EDR is that it can skip some of these common process injection steps, such as allocating memory and changing memory permissions. This is because the vulnerable loaded DLL already provides all that to the attacker.","Loading DLLs with default RWX section to execute code is not new in 2023, it has been used for multiple years in the game hacking community as we can see in this post in the forum Unknown Cheats from 2018.","Based on my knowledge and research, there are no DLLs with a RWX section on a default Windows installation. You can use this Python script to check if there are any on yours. However, the research done by Security Joes found a vulnerable DLL on systems with Visual Studio 2022 Community installed at C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\Git\\usr\\bin\\msys-2.0.dll. This DLL have a RWX section of 16 KB in size, which is enough to store and execute a payload. I was very curious to know how this works, so I created a proof-of-concept that loads the vulnerable DLL and self-inject shellcode: https://github.com/caueb/Mockingjay","All this sounds very interesting, however, this technique is limited to compromised systems that contain a vulnerable DLL. While I was wondering if threat actors may target developers now, as they are more likely to have Visual Studio installed, I thought “why not just bring the vulnerable DLL to the compromised machine?”. I decided to modify the code in my POC to download the DLL from the internet, write to disk, and then load the DLL from disk."]},{"i":"mockingjay---byodll-1","l":"Mockingjay - BYODLL","p":["To test the detection of bringing your own vulnerable DLL, I modified my POC and run against Elastic EDR in my home lab. You can read more about how I have my home lab setup here.","Essentially I have the following setup:","1 x Windows 11 fully updated with Elastic EDR agent (target).","1 x Windows 11 fully updated (attacker).","1 x Raspberry Pi 4 running Elastic on full prevention mode.","Side note: I think Elastic do a fantastic job in detecting and preventing threats. The main reason I’m testing against it is the convenience of having a 30-day trial and the challenge to evade detection."]},{"i":"download-the-dll--save-to-disk","l":"Download the DLL & Save to disk","p":["I created a function that will download the vulnerable DLL from a URL and write into disk. I opted to save it in the C:\\ProgramData\\ folder, usually is a world writable location:"]},{"l":"Payload","p":["Next, I generated a reverse shell shellcode using Metasploit msfvenom and then used the python script bintoaes.py to encrypt the shellcode using AES.","The payload is going to be decrypted at runtime using this function (borrowed from reenz0h @SEKTOR7net) to avoid static detections on Metasploit shellcode:","What I did not know was that whenever the EDR detects the combination of the Windows APIs CreateFileA(to save the DLL to disk) with CryptCreateHash and CryptHashData(to decrypt the payload), the EDR would immediately flag my program as malicious since many ransomware use the same.","Decided to simplify things, instead of encrypting, lets just encode the shellcode, this way we do not load any of the Crypt* functions. I will be using IPV4 encoding, while there are many examples on Github, I will implement the one I learned from Maldev Academy(Sorry, I can’t share this one)."]},{"l":"Spoofing metadata","p":["In order to make my executable less suspicious I removed the CRT library from the project and added spoofed metadata stolen from Notepad++.exe. If you are interested, I created a short PowerShell script to extract the metadata from a binary here.","Below is a comparison of the compiled malware(left) and Notepad++(right) executable metadata:"]},{"l":"Execution flow","p":["Call the RWX region to execute the payload","Checking the C:\\ProgramData\\ folder of the target machine revealed that the DLL was indeed downloaded there:","Decode the Metasploit payload","Download the vulnerable DLL from the attacker machine and save to the target machine disk","Elastic does a good job at detecting the Metasploit shellcode executed in memory, but we still get a reverse shell:","https://github.com/Cracked5pider/ShellcodeTemplate","https://h0mbre.github.io/Win32_Reverse_Shellcode/","I will not get into details how to create one as this post would get too long, but if you are interested, here are a few resources:","In the attacker machine, we will be hosting the compiled malware and the vulnerable DLL:","In the target machine, we can use curl to download the malware and then execute:","Let’s recap what the malware will be executing:","Load the downloaded vulnerable DLL into the process","Map the RWX region of the loaded DLL","Side by side target(left) and attacker(right) machines during execution:","This tells me that the detection is in the Metasploit shellcode we are using and not in the technique itself. The next logical step to bypass the detection is to create a custom shellcode instead of using Metasploit.","This time, no detections. We receive our reverse shell call in the attacker machine:","We can conclude that the Mockingjay technique is very evasive, but also that even if the target machine does not have Visual Studio installed, or at least one DLL in the disk with the default RWX sections, it is still possible for attackers to bring their own DLL and exploit.","We then create a custom reverse shell shellcode and IPV4 encode it, just like we did with Metasploit. Compile the project, send it to the target, and execute:","Write the payload into the RWX region"]},{"l":"Opportunities for detection","p":["There are plenty of opportunities for detection in this technique.","To start off - don’t rely on just out-of-the-box detection rules, use of behavioral analysis, and machine learning techniques to identify process injection.","Create a list of DLLs that contain RWX sections and monitor their use.","Monitor for unusual processes loading a DLL with RWX sections. In this case, a DLL was downloaded from internet and saved to disk, then loaded back to the process. Look for these characteristics.","For more information about Mockingjay, I recommend reading the original article published by Security Joes:","https://www.securityjoes.com/post/process-mockingjay-echoing-rwx-in-userland-to-achieve-code-execution"]}],[{"l":"ThreadlessStompingKann"},{"l":"Intro","p":["The combination of the techniques Threadless Injection, Stomping, and Caro-Kann has proven to be highly evasive against AV/EDR. I developed a simple proof-of-concept by integrating these three techniques and then executed it on a computer protected with Microsoft Defender for Endpoint to observe the detections."]},{"i":"the-defense---mde","l":"The defense - MDE","p":["I sign up to evaluate Microsoft Defender for Endpoint for free (up to 2 months I guess) in this link. Next, I created a new Windows 11 Pro virtual machine on my home network, and onboarded the machine into MDE.","Note that I have not changed any rules or policies, these are the default settings when onboarding a new device."]},{"l":"The code","p":["Caro-Kann involves two injections in the remote process, one for the payload, and the second for a custom shellcode. The custom shellcode is then modified at runtime with the payload address just before injection. A new thread is created pointing to the custom shellcode address, which in turn will change the memory permissions (to RX) and execute the payload.","DLL Stomping, or module stomping, is a technique that involves overwriting loaded modules with malicious code. The main goal is to backup the malicious code with some legitimate module, creating a camouflage effect that makes it more challenging for security measures to detect the presence of the malicious payload.","Fetch the payload from the internet","Find the address of a function A to hold the payload (Stomp)","Find the address of a function B to hold a custom shellcode that will change the memory protection of function A execute it (Stomp)","Get a handle to a remote process","Get the address of 2 functions present in the DLL (Stomp)","Inject the DLL we want to stomp in the remote process (Stomp + Threadless Inject)","Modify the custom shellcode at runtime adding the address of function A and size of the payload (Caro-Kann)","More info at CCob repo and BSides presentation.","More info at S3cur3Th1sSh1t repo of the Caro-Kann technique.","Save the original state of the function B (Caro-Kann)","Sleep for a few seconds to let the function B to call function A and then restore function B (entry point) to original state (Caro-Kann)","The plan:","Threadless Injection is a novel process injection technique involving hooking an export function from a remote process in order to gain shellcode execution.","Use Threadless Injection to call function B (Threadless)","Write the custom shellcode into function B (Caro-Kann)","Write the payload into function A (Caro-Kann)"]},{"l":"Executing","p":["To execute the ThreadlessStompingKann technique, the following steps were taken:","Started a Havoc C2 listener on port 443 (HTTPS) and created a beacon shellcode.","Next, XOR encrypted the beacon file and hosted on the attacker machine, port 80 (HTTP).","Dropped the compiled executable ThreadlessStompingKann.exe in the target machine under the Downloads folder.","Opened Notepad (the target process), started Powershell, and executed the program.","Seconds later, I could see a hit on the web server of the attacker machine to fetch the payload and a new connection was established coming from Notepad.exe.","I executed a few commands in the beacon just to test everything was working, including listed the processes running as we can see below. Highlighted is the MDE agent running."]},{"l":"Observations","p":["During the execution, the following observations were made.","Microsoft Defender for Endpoint (MDE) detected and logged several incidents related to the ThreadlessStompingKann technique, however, none of them seems to be critical enough to raise any alert.","In the image above we see MDE alerts page is empty. I waited up to 4 hours and nothing came up.","The MDE timeline showed the initial detection and response to the technique.","Powershell started the process ThreadlessStompingKann.exe","The payload being fetched from the attacker machine","The payload was triggered and Notepad.exe established a C2 connection via HTTPS to the attacker machine","After 30 minutes of the execution, MDE provided incident details, including information on the memory protections that were changed in Notepad.exe.","The selected row is the Havoc payload, we can compare the size of the region with the output in the executable. However, the detection was triggered during the allocation of the memory and not when the custom shellcode was executed.","Note: I could have used many different approaches to be a bit more stealthier, for example, since we are communicating to the C2 via HTTPS choosing msedge.exe instead of Notepad.exe, or adding other evasive techniques, such as unhooking dll, direct/indirec syscalls, api hashing, iat obfuscation, etc. The code have some intentionally bad opsec to get the gist of MDE against it. I guess the simple code using WinAPIs still work.","The full code for the POC above can be found on my Github repo here."]},{"l":"Credits","p":["CCob for his Threadless Inject: https://github.com/CCob/ThreadlessInject","OtterHacker for his DEFCON31 presentation on Threadless Stomping: https://github.com/OtterHacker/Conferences/tree/main/Defcon31","S3cur3Th1sSh1t for his Caro-Kann: https://github.com/S3cur3Th1sSh1t/Caro-Kann"]}],[{"l":"Acute","p":["IP: 10.10.11.145"]},{"l":"Nmap"},{"l":"All ports"},{"l":"Version and Scripts","p":["Scanning the open ports we see only 443 open. We also notice the DNS atsserver.acute.local. Lets add it to our /etc/hosts file:"]},{"i":"port-443---https","l":"Port 443 - HTTPS","p":["Browsing to https://10.10.11.145/ we are given a 404 not found page. However, browsing to https://atsserver.acute.local/ we are directed to \"Acute Health\" page:","If we go to https://atsserver.acute.local/about.html it is possible to download a .docx file clicking in the \"New Starter Forms\" on the top right corner:","I will use libreoffice to open the file and read its contents:","The document seems to be a guide for a new employee. The important bits are:","The default password and the administrator name","The PSWA (PowerShell WebAccess) session/configuration name dc_manage","Remote training Acute_Staff_Access URL"]},{"l":"Acute Staff Access","p":["Accessing https://atsserver.acute.local/Acute_Staff_Access:","So we need username, password and computer name. So far we have default password. But we don’t have computer name.","Running exiftool in the .docx file we get a bit more information:","The important details are:","Description: Created on Acute-PC01","Creator: FCastle","Modified: Daniel So we have 2 usernames and the computer name.","If we come back to the About page, there is a list of employees:","If we try to follow the same username format that is in the exiftool\"Creator\" field we get:","So now we have all the pieces to try to login at https://atsserver.acute.local/Acute_Staff_Access/. After try and error we login as edavies:"]},{"l":"PSWA as edavies","p":["We have a PowerShell session as edavies. Looking at the network configuration we can see that we are not in the main machine, but in a container:"]},{"l":"Enumerate ports open","p":["I will use Minimalistic-offensive-security-tools to enumerate the ports open: In Kali","In the PSWA","IEX will download and load the script. If you try to download it and execute manually using curl or other method then it will not work. Now run below command to start finding open ports on the gateway IP address:","After couple minutes we can check the open ports dumped into a txt file:","Looks like this IP is a Domain Controller, as it is running Kerberos and LDAP. Let’s get a real shell by uploading our reverse shell executable. If we try to run executable from either home directory or programdata, it gives us error message. Antivirus is running, probably defender. So, we can query the registry to find whitelisted paths."]},{"l":"AV whitelist paths","p":["As you can see, there are two folders which are whitelisted. We can use C:\\Utils directory to execute our reverse shell. Let’s download our executable there and run it."]},{"l":"Metasploit reverse shell","p":["Create the reverse shell:","Setup metasploit handler:","Download the reverse shell to Acute machine and execute:"]},{"l":"Meterpreter Session","p":["As the reverse shell is executed in the Acute machine we receive the meterpreter session:","I ran WinPEAS and got this interesting info:","This means that edavies is using RDP (gui interface) and is ACTIVE! We can use a meterpreter module to watch his screen:","While stalking edavies we see the user opening a PowerShell session and entering some commands:","This was his commands:","He is using the user imonks credentials to start another session. Now we can run commands as a new user, lets see what we can find."]},{"l":"Running commands as Imonks","p":["We can read the flag:","Query the domain controller about imonks user:","So imonks is member of \"Managers\" group. Lets see who else is member of that group:","User awallace is also member of \"Managers\" group. We really need is a real shell as imonks to run more commands. Lets keep enumerating the machine. If we check the imonks desktop, we will find a powershell script, wm.ps1:","If we execute this script, then it sets a secure password, and execute Get-Volume from jmorgan user's context. We have to edit it script and modify the invoke command.","This command will replace the Get-Volume string with cmd.exe /c c:\\utils\\reverse.exe We already have reverse.exe in utils directory. So upon execution we get the reverse connection on metasploit. Let’s read the contents of file to make sure our cmd is good to go:","Perfect, just need to setup a metasploit handler again and run the script:","Metasploit handler:"]},{"l":"Meterpreter session as jmorgan","p":["A simple enumeration in the user groups tells us that it is member of BUILTIN\\Administrators. The privilege escalation now seems logic.","We may have pwned the administrator, but it is not the actual host. We can confirm by running ipconfig:","Since we are Administrator lets dump the hashes:","Crack it:","Previously we queried the domain to find member of \"Managers\" group, there was one user, awallace, let’s try to use this password from this users context."]},{"l":"Running commands as awallace","p":["Coming back to edavies PSWA we can now try to send commands as awallace using the password Password@123:","Enumerating files and directories there is one that sticks out - keepmeon:","Lets read its content:","This looks like a schedule script, it runs this batch file every five minutes and checks for any .bat files in the parent directory and if there’s a .bat file then it executes it. The main thing/information is that the script is for only lois user and we already know that, lois is the only user who can change group membership. So, we can create a batch file which gives awallace user administrator privileges of site admin group.","Check that the file was created:","Now we need to wait for five minutes to run that schedule job to execute our batch file. Check the whether you added to site_admin group or not.","Lets check:","Yes! We got it. We are domain admin now. Let’s read the final flag from administrators directory."]}],[{"l":"AdmirerToo","p":["IP: 10.10.11.137"]},{"l":"Nmap"},{"l":"All ports"},{"i":"version--script-scan-on-open-ports","l":"Version & Script scan on open ports"},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Looking at the webpage on port 80 we can see an email and domain when we make a request to a non existent page:","We get webmaster@admirer-gallery.htb. Lets add it to our /etc/hosts file."]},{"l":"Subdomains","p":["Lets check if there is any other subdomains:","Lets add db.admirer-gallery.htb to our /etc/hosts file too."]},{"i":"dbadmirergalleryhtb","l":"DB.ADMIRER.GALLERY.HTB","p":["Accessing http://db.admirer-gallery.htb we get the Adminer v4.7.8 portal: We have access to database via web. Let’s enter and look for any interesting tables. just hit enter, and we are in. There’s only one table and nothing really interesting in that. The reason why it didn’t ask for any credentials is that the credentials are hard-coded in the page and POST them once we click on \"enter\" button\""]},{"l":"ADMINER CVE","p":["According to CVE Details there are 4 vulnerabilities for \"OpenTSDB\". Two of them are Code Execution. But we need to find the right version information of running application. To get version information, we can use the below endpoint.","After forwarding the request, we’d get this error page. The important part of this is mentioned at the end of the error:","After setting the redirector for the version endpoint, capture the login request and modify it a previously and forward it to server.","After trying to use this credentials to login via SSH and failing I found a CVE-2021-21311 that could be useful. It affects all Adminer fromv ersion 4.0.0 and before 4.7.9. As we can see in the machine is running version 4.7.8 so it is vulnerable! Basically is a Server-Side Request Forgery to access an internal server/service. There’s a POC already available for this. We just need to setup a redirector on our Kali Linux machine.","Alright, we got the version information. It is using 2.4.0 and RCE via command injection exists in this version. The POC is already available for this vulnerability here. Lets modify the POC to send a ping to our machine first:","Analyse the login POST request:","As we saw in our initial port scan that three ports are filtered. Let’s try to access them via SSRF. Setup redirector for any of the three filtered ports.","As you can see the source code, the driver name is just elastic not elasticsearch. This is the reason it didn’t work. Let’s change both values one more time.","For this to work, we need to capture the request of logging into the DB in Burp Suite. Make sure not to send this to repeater.","Intercept the login request once again and check the webpage. We got the response and the title of the page is \"OpenTSDB\".","Let’s modify our redirect link accordingly:","So, we need to edit Auth Driver value and Auth Server value. According to POC PDF, we need to modify auth drive value to elasticsearch and auth server value as our attacking machine’s IP address (Kali Linux). After changing the both values, I couldn’t get a hit on our python script. Then I looked into the source of Adminer at https://github.com/vrana/adminer/tree/master/adminer/drivers:","Start the redirector script:","Success! We get RCE!","The error is triggered because the metrics which we used (sys.cpu.nice) is not available, so it couldn’t complete the code execution. Lets find the metrics looking at the documentation.","This is a default request. If we change Auth Server value from localhost to our Kali IP address and forward the request to server, then we’d get this error:","We get a hit:","We get a response back:","We got the index.html source of target port 80. This simply means, we can access any locally running service."]},{"l":"RCE","p":["Ok, now lets get a reverse shell. Make sure to put the payload inside single quotes and urlencode:","Setup the redirector with our urlencoded command:","Start a netcat listener on port 9001, intercept the database login and modify the parameters to trigger the SSRF -> RCE and we are in:"]},{"l":"Shell as opentsdb","p":["From here we can get the /etc/passwd to check the users in the machine:","We see there is a user called jennifer."]},{"l":"Found credentials","p":["Enumerating the machine we find credentials in the plugins directory of adminer:","After trying some combinations I finally get a successfull SSH login using jennifer:bQ3u7^AxzcB7qAsxE3:"]},{"l":"SSH shell as jennifer","p":["We can read the flag.txt in the home directory. While enumerating the machine we find a webserver running internally on port 8080:","Running a simple curl command we can get a grasp of it:","It is running an web application called \"OpenCats\"."]},{"l":"Enumerating services","p":["Enumerating the services running on the machine we see another interesting thing:","We confirm that \"OpenCats\" is running ( apache2@opencats.service) but also Fail2Ban ( fail2ban.service). Lets see what version:","This version in particular has a RCE vulnerability in mailing action using mailutils."]},{"l":"Privilege Escalation to Root","p":["First lets forward the port 8080 via SSH so we can have a look at the OpenCats website. I will forward port 8080 to my local port 9000:","Browsing to http://localhost:9000/ we see OpenCats website and version 0.9.5.2:","This version has a deserialization vulnerability, CVE2021-25-294, that can lead to remote command execution. But we need to authenticate in the web application first."]},{"l":"OpenCats database","p":["We can find credentials for the website database looking at /opt/opencats/config.php:","We can now access the database and update the admin password with our own.","Create a password:","Update the admin password in the database:","Great, now we can login as admin:password123 in the website portal:","There is a blog by Snoopy Security that explains how to exploit that CVE, we can read and follow along."]},{"l":"Exploiting OpenCats","p":["For this to work we need to switch to activities tab, click on date and intercept the request in Burp Suite:","According to the blog, activity parameter is vulnerable. So, we need to generate serialized exploit using PHPGGC and replace it with default one. We can use https://github.com/ambionics/phpggc. First we can simply create a file in /dev/shm to check its permissions and user details:","Replacing the generated serialized object above with the one in DataGrid parameter we get the exploit to work. If we look at /dev/shm/ we can see our file:","Things to note here is that the file was created by devel user and not root. Devel does not have any shell access (see /etc/passwd below) so it is probably useless to get a shell as him:","Dead end."]},{"l":"Fail2ban exploit","p":["Going back to Fail2Ban exploit, we can get code execution if we edit the /etc/hosts file and point to our own IP address. However, we don’t have permission to edit the hosts file, only root can edit it. But, we can put a whois configuration file in /usr/local/etc directory and when we execute whois command it takes configuration file for processing. This is the default configuration of jail (fail2ban), if any IP is banned then it sends an email to specified address.","The configuration file below says that Fail2Ban is enabled in SSH:"]},{"l":"Root exploit chain","p":["We will use OpenCats deserialization vulnerability to write a malicious whois configuration file that is pointing to our machine. Then we create another file that will send us a reverse shell and it is triggered whenever Fail2Ban sends an email - in another words, when someone tries to SSH login with wrong credentials multiple times.","Step 1 - Create a configuration file:","Step 2 - Serialize the configuration file to overwrite /usr/local/etc/whois.conf:","Step 3 - We create a local shell file that we’ll use to get a reverse shell to our own box:","Step 4 - Start a netcat listener on port 43 (whois) & on port 9001 to receive the shell:","Step 5 - Now we go to the OpenCats website, click on the vulnerable \"Date\", intercept the request and modify the parameter with our generated serialized object of step 2.","Step 6 - Test -> Run whois to our machine:","And we get a hit back in our netcat listening on port 43! Nice! Lets set the netcat for the whois back up again:","Step 7 - Spam the SSH login to get banned and trigger Fail2Ban At this moment our payload is already delivered to target machine, now we need to trigger Fail2Ban application via failed SSH attempts:","And we are ROOT."]}],[{"l":"Catch","p":["IP: 10.129.183.178"]},{"l":"Recon","p":["Running Nmap we can see 5 ports open, 22, 80,3000,5000 and 8000."]},{"l":"Open Ports summary","p":["Port","Description","22","SSH","80","Android app static page","3000","Gitea Version: 1.14.1","5000","Lets Chat","8000","Cachet"]},{"l":"Port 80","p":["Browsing to http://10.129.183.178/ we see that it is a web page for a Android application. We can download the app clicking in the \"Download Now\" button."]},{"l":"App Static Analysis","p":["Using jdx-gui we can load the Android application and see its source code. Looking in the com.example.acatch.MainActivity line 21, we see the app is trying to fetch the URL https://status.catch.htb/:","Lets add these entries to our /etc/hosts file:","Another thing to note is the APK signature: It seems that we have a developer name here: Will Robinson.","Analysys with MOBSF Another useful tool for static/dynamic analysis is MOBSF. Lets add the .apk file into MOBSF and see the results. One of the most interesting findings was harcoded secrets:","Maybe we can use the Lets Chat token to authenticate on port 5000 and retrieve some data."]},{"l":"Lets Chat","p":["Lets Chat have a unique way of using the token as the user to authenticate and password can be anything but blank, I will use the word password.","Get rooms:","We get a list of rooms:","Cachet Updates and Maintenance","Android App Updates. Issues & More","New Joinees. Org updates","Get Messages in the room \"Cachet Updates and Maintenance\":","Here we find a conversation between the user john and what seems to be the admin. The admin creates credentials for john and send it in the chat:","It seems that the administrator created an account credentials for the user john:"]},{"l":"Exploitation"},{"l":"Cachet","p":["We can use john's credentials above to ligin to Cachet running on port 8000. URL: http://10.129.184.153:8000/auth/login Credentials:","Browsing the Cachet interface we can go to the \"Settings\" and it will reveal the application version:"]},{"i":"exploitation-of-cachet-up-to-24-dev","l":"Exploitation of Cachet up to 2.4 dev","p":["Looking on internet for vulnerabilities in this version we can find a very interesting blog from Sonar that explains how to chain some vulnerabilities to trigger remote code execution. However, it did not work for me.","Cachet Twig SSTI - UNINTENDED WAY One way to get a foothold in this machine was via Server-Side Template Injection. Logged in as user john we can create an incident template and add a reverse shell to be triggered: There is even a hint to use Twig syntax. Payload:","Now all we have to do is send a POST request to /api/v1/incidents with the template name we just created. It does not need to be authenticated to send this request:","And we receive the reverse shell: And then we could find the credentials for will in the .env file:"]},{"i":"cve-2021-39174---configuration-leak","l":"CVE-2021-39174 - Configuration Leak","p":["As mentioned in the article referenced before, we can take advantage of the fact that values of this file are displayed in the interface? This feature is convenient: by referencing another variable in an entry of the dotenv configuration file and displaying this entry in the interface, it reveals another's variable value.","We can see in the Settings -> Mail, that \"Mail From Address\" is already populated with some value being fetched.","Lets change the email to some environment variable. According to Cachet documentation, the default .env file is the following:","We can try any of the above using the syntax ${VARIABLE}.","Changing it to ${DB_PASSWORD} saving and reloading the page we get the database password. Later we change to ${DB_USERNAME} we get the username."]},{"l":"SSH as Will user","p":["Using the credentials above we can login to SSH:"]},{"l":"Enumeration to privesc","p":["Running pspy to monitor the processes and cron jobs we see:","The script at /opt/mdm/verify.sh is running as root every few minutes. Looking into the code we see the logic performing 3 checks. One of them called app_check() is echoing the app name and is probably vulnerable to command injection if we modify a valid .apk file.","Another thing to note is the folders where the script will load the .apk:"]},{"l":"Create an apk with command injection","p":["Using the app we downloaded previously, we need to modify the value of app_name in /res/values/strings.xml:","We can decompile the original .apk file and add our command to make a copy of bash. Decompile the apk:","Modify the file res/values/strings.xml to ammend our command injection. I will make a copy of bash to /tmp folder and give it SUID permissions:","Compile the folder catchv1.0/ back to .apk:","Generate a key to sign the apk:","Sign the .apk using jarsigner:","Zipalign:","Now we upload caue-fix.apk to the machine and place it in /opt/mdm/apk_bin directory - as this is where the script will look for .apk - so it is processed by the verify.sh script. In just a minute we get our bash with SUID bit:"]},{"l":"Root","p":["We can simply execute the copy of bash in the /tmp folder to get a shell as root:","And we are root!"]}],[{"l":"Late","p":["IP: 10.129.166.198"]},{"i":"nmap---port-scan","l":"Nmap - Port Scan"},{"l":"All ports"},{"i":"service--safe-scripts","l":"Service & Safe Scripts"},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Browsing to http://10.129.166.198 a web page of what it seems to be a photo editing service is loaded. Looking at the source-code we can see some references to 2 hosts:","late.htb","images.late.htb","Lets add it to our /etc/hosts file:","Now we can access http://images.late.htb/:","If we pay attention, the title says \"Flask\", and this framework is known for Server-Side-Template-Injection issues. So if this application turn images into text we could pottenctially send an image containing a SSTI payload to test."]},{"l":"Testing for Flask SSTI","p":["Lets start with the most simple payload: {{ 7*7 }}. We can simply open any text editor, type in the payload, zoom in, and take a screenshot like below: Now we upload image to the website.","The application send us a text file of the results. Opening the results.txt file we see:","This means that the application/server executed a simple 7x7 mathematic equation, in another words, we have remote command execution."]},{"l":"Foothold","p":["Moving to another level now, lets see if we can get the /etc/passwd file. Googling around we can find multiple web sites with Flask SSTI payloads, after trying a couple ones I found this one to be working:","While testing the SSTI payloads, I found out that some fonts works better than others, and we need to have a very clear screenshot of the payload. To circunvent this, I used Figma to create my screenshots.","And we got the results.txt:","Searching for users in the /etc/passwd file we note the line:","Which seems to be an interesting user with a home and a bash tty. During the nmap scan we saw that the SSH port is open. Using a guessing game, we can try to retrieve the SSH private key for this user. The payload looks like this:","I had to change the font to Roboto to make it work this time! And the image generated in Figma:","And the results.txt:","We can create a file with the contents, give it the right permissions(600) to the file and use it to SSH as svs_acc user."]},{"l":"Path to Root","p":["Using pspy we notice that there is a cronjob creating a bash script and setting the owner as svc_acc user. It creates the following file:","With the contents:","Using lsattr we see that we cannot edit the file contents but we can append!","It seems that the script is executed as root when someone SSH in."]},{"l":"Privilege Escalation to Root","p":["We have \"append\" permissions over this file so we can simply add any system command in there and login with SSH to trigger the script."]},{"l":"Read root flag","p":["Lets make a copy of the root flag to /tmp directory:"]},{"l":"Get a root shell","p":["Or we could simply add a reverse shell:","In Kali we receive the reverse shell:","We are root."]}],[{"l":"Noter","p":["IP: 10.129.171.195"]},{"l":"Enumeration"},{"l":"Open ports","p":["Nmap safe scripts:"]},{"l":"Port 5000"},{"l":"Enum backend","p":["Accessing the Website on port 5000 we see a note taking application. We need to login or register an account to create notes. I created an account with the following details:","Login in to the application we can create our first note. I tried creating some XSS notes but nothing works:"]},{"l":"JWT cookies","p":["Analysing the cookies set by the server when we login we can note that it is using JWT:","Something funny happens when we \"Add Note\", \"Edit\" or \"Delete\". The server sends a different cookie and then set the original cookie back. Lets edit the note and use Burp to intercept the traffic:","Lets use JWT.io to decode and compare them. Request cookie:","Response cookie:","Based on the _flashes function and the backend (Python) we can assume that the server is running Flask. We can try to use a tool called flask-unsign to crack the signature and then we can forge our own JWT if we get the secret.","Good, the secret is secret123, so now we can impersonate any user. We will need to enumerate some users."]},{"l":"User enumeration","p":["In the http://10.129.171.223:5000/login page we can enumerate users based on the error message. We can type any random password and If the username exists it will display \"Invalid login\", but if the username does not exist it shows \"Invalid credentials\". Lets use hydra with the wordlist of Username - Names from seclists:","Note that I'm hiding any response with 110 words (--hw 110) to filter showing wrong credentials.","After some time we get the user blue. Now we can forge a token as this user to have a look at his notes."]},{"l":"Forge JWT","p":["We add the generated token to our cookies and reload the page:","Looking at blue notes, we find some credentials:"]},{"i":"ftp---port-21","l":"FTP - Port 21","p":["Lets login with the credentials provided:","We can download the file policy.pdf found in the ftp:","This line from the PDF looks promising: \"Default user-password generated by the application is in the format of \" username@site_name!\" (This applies to all your applications)\" We saw above the ftp_admin user sent an message to user blue. Following the logic we have:","Login in to FTP we see 2 app backup files:","We see that one was created in November and the other in December. Lets keep it organised and create a fodler for each one:"]},{"l":"Code analyses","p":["The difference is that in the November backup the file app.py had MySQL credentials:","We can also see in the source-code that the application is using md-to-pdf module and looking at the implementation of \"export_note_remote\" there is a remote command execution vulnerability:"]},{"l":"Foothold","p":["Searching on internet we find a CVE for the md-to-pdf module:","https://security.snyk.io/vuln/SNYK-JS-MDTOPDF-1657880","Logged in as user blue we can go to the Dashboard and we see the \"Export Notes\" function:","After trying a couple times we see that the server only accepts a markdown file. Lets prepare one to send us a reverse shell:","Now we start a netcat listener on port 4444.","We go to http://10.129.172.62:5000/export_note, add our IP to the URL box, start a python web server to host the rce.md file and click on \"Export\":","We receive a connection back on the netcat listener:","We can go to /home/svc and get the user flag."]},{"l":"Privilege Escalation","p":["There is something interesting in the user home directory:","As we can see the MySQL history file is owned by root and we got the credentials to login as root user from the application source-code previously:","We can confirm that mysql is running as root reading the database configuration:","Great! We can exploit this vulnerability loading a malicious shared library into MySQL."]},{"l":"MySQL User Defined Functions","p":["Download the exploit from here and upload it to the target machine. Compile it:","Lets login to MySQL:","We need to load the shared library into the mysql plugins directory. Lets see where is it:","Perfect, now we can follow the exploit directions to create a function that will load the library and execute code as the user running the mysql server, in our case, the root user:","Here we proved that we have code execution as root, so lets make a copy of bash and give +s privileges so we can get a root shell.","We are root!"]}],[{"l":"Overflow","p":["IP: 10.10.11.119"]},{"i":"nmap---port-scan","l":"Nmap - Port Scan"},{"l":"All ports"},{"i":"service--safe-scripts","l":"Service & Safe Scripts"},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Before we start digging into the machine I added the IP address to my /etc/hosts:","Going to http://overflow.htb/ we see a website with only \"Sign In\" and \"Sign Up\" functionalities:","I first tried some default credentials but nothing works, so I registered a new user caue:password. The application automatically log me in as I sign up. Notice the redirect to /home/index.php, and other options are now available:","Profile: Static profile page","Blog: Static blog page","Pricing: Redirects to home page","Log out: Log out and redirect to home page","Nothing much we can do. I decided to run gobuster and also look at the cookies."]},{"l":"Gobuster","p":["Gobuster the root directory:","Gobuster the /home directory:","Accessing /home/logs.php we get \"Unauthorized!!\" message:","Probably we need to be a user with high privileges."]},{"l":"Cookies","p":["Lets take a look at the cookies:","Tried to decode the cookies but didn't get any information back, it looks like there is some cipher behind it. However, modifying the cookie adding or removing characters, we get redirected and an error message:","This could be indicative of CBC encryption, which can be reversed using a Padding Oracle Attack. We’ll use padbuster to attempt the padding oracle attack.","sudo apt install padbuster","Padbuster is a tool able to decrypt ciphertext, encrypt paintext, and perform analysis. In another words, it can decrypt the cookie and also generate a new cookie with the text provided. So first we need to know what is that cookie so we can generate an admin cookie.","The original cookie from my screenshot seemed to have expired. I think there is some kind of database cleanup schedule running. So I registered a new account and extracted the cookie. Now we put this into our padbuster command:","We have successfully decrypted the cookie! The cipher value is user=caue, which was the username registered. Now that we know the cipher value syntax, we’ll use padbuster to generate a new cipher for admin:","Great! We have the admin cookie! We can open the browser developer tools and change the current cookie to this one. As soon as we refresh the page we get an \"Admin Panel\" menu option:","Clicking in the \"Admin Panel\" takes us to http://overflow.htb/admin_cms_panel/admin/login.php. It is a CMS Made Simple portal. There are a lot of exploits for this application but they most require authentication and we don't have credentials yet."]},{"l":"Logs","p":["Decided to go back to /home and take a look at the \"Logs\". Since we were not authorized before, lets see what happend with admin cookie:","Clicking in the \"Logs\" menu bar opens a popup dialog displaying the last login times of the user. If we look in the browser developer tools, we can see an interesting JavaScript being loaded ../config/admin_last_login.js. Lets take a look at it.","Basically, it is fetching data from http://overflow.htb/home/logs.php?name=admin. Going to that URL we can confirm that:![[image9.png]]","Every time a web application have a parameter that the user can control, we should test for weak sanitization. I will make this request again, intercept with Burp, save it to a file and use sqlmap to check for injections."]},{"l":"SQLmap","p":["Request saved from Burp (important to keep the cookie for authentication!):","Testing for SQL injections:","Yes! It is vulnerable to SQL injection. We see that the database is MySQL so we can add -dbms=mysql to our next queries. Lets enumerate this databases.","Databases:","DB->Overflow:","I could not crack this password! Lets move on.","DB->cmsmsdb:","DB->cmsmsdb Table->cms_users:","Ok, this looks promising... Doing a little bit of research, this hashes are encrypted with salt and it can be found in the cms_siteprefs table under the sitemask column:"]},{"l":"Cracking users hashes","p":["In order to use hashcat we need to add the hashes into a file following th hash:salt format:","Lets run hashcat against the hashes:","Hashcat only cracked the editor password alpha!@#$%bravo."]},{"l":"CMS Made Simple","p":["Back to the CMS page http://overflow.htb/admin_cms_panel/admin/login.php we can use this credentials to login! We can see at the bottom of the page the version CMS Made Simple 2.2.8 Flin Flon. I kept browsing and enumerating the pages and saw an hint to another page:","Adding the new hostname to our hosts file we can access it. There is a login page and using the same credentials from editor we successfully login to the web app."]},{"l":"Devbuild","p":["Poking around on the website, we find an upload function when we click on our account. I tried uploading a php webshell, but it failed due to unsupported filetype.","Another interesting thing was the server response when we upload a file:","It is using exiftool! Doing a little more research on exiftool- specially version 11.92, I found a CVE-2021–22204. Metasploit has a module for the exploit, which makes this super convenient.","Lets start a netcat listener on port 4444 and upload the generated jpeg file."]},{"l":"Shell as www-data","p":["Looking through the web folders we find some credentials.~/devbuild-job/config/db.php","And","~/html/config/db.php","We need to escalate to a user, preferable with shell. Lets look at the /etc/passwd:","We have a user called developer, and we also have a database password for developer. Lets use SSH with these credentials."]},{"l":"SSH as Developer","p":["We still don't have user.txt flag! It is in the /home/tester directory. So we need to find a way to escalate to tester user.","Enumerating the machine, we see some interesting files owned by tester in /opt:","The problem is, the taskmanage subdomain does not exist. We can hijack the request doing the following:","Create task.sh on ur attacking machine that when ran it creates a reverse connection to us","Spin a python web server on port 80","Set our attacking IP to resolve taskmanage.overflow.htb on overflow's host file","Start netcat listener and wait a minute for tester to connect \uD83D\uDE00","First I created the task.sh in my machine with a bash reverse shell and started a Python web server on port 80:","Also in another terminal started a netcat listener on port 4444.","In Overflow machine we can add the host entry taskmanage.overflow.htb pointing to our machine:","After a minute or two we get a hit in our Python web server and a connection back to our netcat listener!"]},{"l":"Shell as tester","p":["Lets upgrade the tty generating SSH keys:","Create a file with the id_rsa contents in attacker machine and use it to SSH in:"]},{"l":"File encrypt","p":["And the PIN is valid! We’re presented with a name prompt and the program exited with a thank you message.","Back to Ghidra we look at the check_pin function again and spot where the name: is being used and stored. It is stored in local_2c variable which is programmed to allocate 20 bytes only, here is our buffer overflow!","Create the new hash for user caue with password pass123:","EIP was overwritten with 0x35624134. Using msf_pattern_offset we can identify the overflow offset at 44.","First I check the file security flags:","Given the name of the machine, I thought this would be a buffer overflow. So I tried passing varying lengths and characters to the PIN field but just said \"Wrong Pin\". So, let’s bring the file back to our machine so we can reverse it.","Going back to the /opt directory we can access the file_encrypt folder, owned by root but with ACLS to the tester user, and read the README.md:","Here we disassemble the random() function. Next we set a breakpoint at offset 57, where we xor our values. The end result of the xor operation is returned by the function.","Lets open in Ghidra and have a look at the functions! Starting with the check_pin function, maybe we can reverse the code to determine a valid PIN.","Make a copy of /etc/passwd and add our user with root privileges:","Next we encrypt our modified /tmp/passwd file. To do this, I wrote a simple python script:","Now that we know the offset, we’re going to attempt to route the program execution to the encrypt function. To get the address of the function, we run the program in gdb, issue a ctrl-c and dissassemble the function.","Now we run the program until the breakpoint is reached. Once there, we can examine the value at the memory location, which would be 0x8(%ebp) or, written differently, ebp+8.","Now we’re ready to run the file_encrypt program with our overflow.","Our plan is to create a copy of /etc/passwd and add a new root user. We’ll then use the program to encrypt and overwrite the system /etc/passwd with our modified copy.","Running the python script generates a PIN code:","Running the script give us a file called passwd2 which is encrypted:","The code looks fairly straightfoward. The PIN we enter is stored in the local_18 variable and then compared to local_14. If they match, we have the correct PIN. local_14 is generated through the random() function. Let’s look at it:","The function starts at 0x5655585b. Now we can add that to our buffer overflow to overwrite EIP and force us to the encrypt function.","The next step is to find the offset for the EIP register. If we’re able to control the values placed in the register, we can take control of the programs operational flow and redirect it to our advantage.","The other issue is that the return value from the random function is a type long integer. Because our input value in check_pin is a signed int type, we need to cast the return value from random as a signed int, otherwise the values will never match. Python3 does not differentiate between long and int values natively, so to do the conversion we need to include the ctypes import in our code.","The value at that address is the same value passed to local_c. So essentially in our code, we’ll need to xor the final local_c value against the original local_c value.","This is the function that creates the PIN. In theory, we should be able to replicate this code elsewhere and generate a working PIN. We’ll do this in python and run it on the server. There are a few gotcha’s in this function. First, was not able to decompile the first variable correctly, leaving us with in_stack_00000004. We need to identify this value since we will be xor’ing it with the local_c value below.","To get this value, we use gdb to set a breakpoint at the function return, and then we examine the value in memory at that location:","Using pattern_create, we generated a string of 300 characters. We’ll input it using gdb and then extract the EIP value.","We can confirm running the binary in gdb and passing a large amount of characters when it asks for a \"name\":","We will manually encrypt our modified passwd file first prior to passing it through the program. An encrypted value XOR’ed by the same key (0x9b) should give us the original cleartext /etc/passwd. In other words, the encryption program will actually decrypt our passwd file when it overwrites /etc/passwd.","Yes! It is working, and now is asking for the \"Input File\". Going back into Ghidra, we take a closer look at the encrypt function. The program’s purpose is to take a file and encrypt it in a new location. It does this by reading the file and XOR'ing it with 0x9b."]},{"l":"Root"}],[{"l":"Overgraph"},{"l":"Enumeration"},{"l":"Nmap","p":["Scan all ports open:","Scan services on open ports:","We see that the machine is running a web server on port 80 and redirect us to graph.htb. Lets add the DNS entry to our /etc/hosts file:"]},{"l":"Port 80","p":["Going to http://graph.htb didnt give us much information to attack. Lets run a VHOST bruteforce to check if there is anything else:","We have a new VHOST: internal.graph.htb Lets add it to our /etc/hosts file too:","We browse to http://internal.graph.htb and we get a login page:","Default credentials don't work. We find the registration endpoint at http://internal.graph.htb/register: As we can see, it is expecting an email from the domain @graph.htb.","When we try to register test@graph.htb email we can use Burp to intercept the request and see that it is making a POST request to /api/code in the internal-api.graph.htb host name: Add it to the /etc/hosts file and try again.","Good! We get the response:","And now what? Decided to run gobuster in the /api endpoint:","After a lot of try and error to find out how the API works I got the following:","We need to send a email to /code, it will ask for the OTP","We send the OTP via /verify endpoint","After verified we can /register email and password","The only problem was, there is no way we can get an OTP to send in the step 2. The trick here was to use NOSQL injection to bypass the code verification."]},{"l":"Exploitation"},{"l":"Bypass Login","p":["First we send a POST request to /api/code with the email we want to login:","Response:","Then we need to send the OTP to /api/verify with NOSQL injection to bypass:","For last, we send our email and password to /api/register:","Now we can go to the login page and login with our credentials!"]},{"i":"csrf---steal-admin-token","l":"CSRF - Steal admin token","p":["An interesthing this to note is the POST request sent to /graphql when we update the profile:","Another thing to note is that the field \"First Name\" and \"Last Name\" in the Profile page are vulnerable to XSS. We can update our first name to:","As the page refresh we get a new option in the menu - Uploads:","As we login to the page we can see a message in the chat:","Base64 encode all this payload above:","Chaining all the vulnerabilities: The plan is to change the admin \"First Name\" to the XSS that will send us the adminToken. As we saw previously the syntax to change the profile details requires the user ID, and the user name. We can use the code playground at /graphql to retrieve the admin ID, in my case \"Sally\" user.","Great! Lets construct the attack:","It seems to be the admin asking us to send a link to verify that we are a valid user from the organisation.","It wil trigger the XSS:","Looking in the JavaScript files we find the token we need to steal: Its the adminToken from the localStorage!","Send this link in the chat and wait a minute to receive the admin token: Add the adminToken to our local storage in the browser, change the admin to true and refresh the page:","Start a python web server in our machine.","The above is what we need the admin to execute in his browser. Now we can send all this using the open redirect vulnerability and sending the link in the chat.","There is another piece of the puzzle in the http://graph.htb/, an open redirect vulnerability: We can use this to send the link to the admin in the chat later.","Use the open redirect vuln:","We now know that the web app is using graphql and also the syntax needed to change the profile details. Going to http://internal-api.graph.htb/graphql we have a code playground: Lets move one with enumerating the path to steal the adminToken, we will be using more of this later."]},{"i":"ffmpeg-ssrf--lfi","l":"FFmpeg SSRF + LFI","p":["It seems that we can upload videos of type avi, mp4, mkv and webm. Doing a bit of research we find that this hackerone report that explains an External SSRF and Local File Read via video upload due to vulnerable FFmpeg HLS processing in TikTok app. The POC is well described so we can combine that with this exploit to retrieve files from the target. Create the file video.avi:","When we upload this file, it will make a call to http://10.10.14.4/initial.m3u?filename=/etc/passwd where we will prepare a server to extract the file passed in the argument.","Git clone and run the server:","Submit the video.avi file in the web page and wait to the server to extract the file data. Once it is done, the tool will save the output into a file, but without line breaks, so we need to format ourselfs:","The output of /etc/passwd reveals the user user is present, have a home directory and a /bin/bash shell. We should target him and try to extract his SSH keys. We change the video.avi file to:","Upload again!","Cool, we got the SSH key of user, we can use it to SSH in now, we just need to add the line breaks formating the file and give its permissions:"]},{"l":"Privilege Escalation"},{"i":"enumeration-1","l":"Enumeration","p":["Enumerating the machine we see a socat process running as root:","It is a custom application:","Lets download the binary and the libc folder to our machine:"]},{"i":"binary-exploitation---code-analyses","l":"Binary Exploitation - Code Analyses","p":["First we see that the binary is linked to the libc so we will need to patch:","We can use Pathelf tools to do the job:","We can check that now is using the right libc:","We try to run the binary but it asks for a token that we don't know. Open the binary in Ghidra to have a look at the functions.","We see the main function prints the \"Custom Reporting\" banner and then calls auth(). Lets see this function:","First it checks if the input is 15 bytes. Then it just take 5 bytes from it and make xor with secret. Reverse engineering this in python:","It will generate the token from secret.","So the token is AAAAAAAAAAAAAs. It has 14 characters as the last one is \\n in a total of 15 bytes. Running again we see the options:","Lets run with GDB and debug:","Analysing the userinfo we see the name we entered and a string that calls system. Maybe we could put the address 0x4041a8 as our name in the program, then use the edit() function to overwrite the Last Used On $(date)\\ to /bin/sh.","We are lucky because the edit() function do not check for the index and we can edit addresses:"]},{"l":"Exploit","p":["We can use SSH to forward the port of the binary running as root:","Python script to exploit the binary:","For some reason after executing the python script I couldn't get output of the system commands, so I sent myself a reverse shell from the pwndbg interactive session:"]}],[{"l":"Phoenix","p":["IP: 10.10.11.149"]},{"l":"Nmap"},{"l":"All ports"},{"l":"Service Scan","p":["We can see that port 80 is redirecting to https://phoenix.htb. Lets add phoenix.htb dns entry to /etc/hosts:"]},{"i":"port-443---https","l":"Port 443 - HTTPS","p":["From the nmap scan I can see that it is running Wordpress v5.9. Lets run wpscan to enumerate some more:","Bad decision! I got IP blocked!","Lets manually enumerate the website. Looking at the home page source code I could spot some of the plugins metadata. One of them, asgaros-forum, even leak the the version installed:","Searched for known vulnerabilities and found an unauthenticated SQL injection for this plugin. To exploit is very easy, the syntax looks like this:"]},{"i":"asgaros-forum-sql-injection---wp-plugin","l":"Asgaros Forum SQL injection - WP plugin","p":["From the main page we can access the forum at https://phoenix.htb/forum/. Browsing to \" Members\" tab we get a list of possible users:","We can test the SQL injection vulnerability sending the following GET request:","And the browser received a response back from the server 10s later, confirming the SQL injection.","I will use SQLMap to automate the exploitation. First, I intercepted a request to the vulnerable URL with Burp:"]},{"l":"SQLMap","p":["I'm using \"--technique T\" to use Time-Based techniques as we know it works from the POC. SQLMap found the vulnerability:","We learned that the database is MySQL, we can add --dbms=mysql to the arguments so it goes faster. Lets dump all the database names:","The process is going VERY slow.","Wordpress by default creates a table called wp_users. More info here. Inside this table it is stored details of the users. I'm interested in user_login and user_pass:"]},{"i":"cracking-hashes---hashcat","l":"Cracking hashes - Hashcat","p":["Added the hashes into a file called hashes.txt and attempt to crack it:","We got some passwords but no luck for Jane and Jack."]},{"l":"Login in as Phoenix","p":["Login using the administrator credentials phoenix:phoenixthefirebird14 we are stopped by OTP:","I tried many ways of circunventing the OTP but nothing works. At this point I decided to re-enumerate the plugins installed on wordpress. Maybe we can find some vulnerable plugins. Reading the source code of the home page I could get some of them:","I looked for exploits but nothing really interesting. Wordpress stores its active plugins register in the database. It is usually located in:","Database: wordpress","Table: wp_options","Column/registry: active_plugins","So i decided to play with the SQL injection a bit more and dump the wp_options table to see what is in this registry:","It was dumping a lot of data and very, very, slow! But when I saw the plugin download-from-files/download-from-files.php being used I immediately searched for vulnerabilities on internet.","Found an exploit for Download From Files v1.48 (Arbitrary File Upload). Exploit-DB link. Reading the exploit, it abuses of an arbitrary file upload vulnerability where the plugin allow an unauthenticated user to upload php4 and phtml files. I will make a copy of PownyShell, change the file extension to .phtml and upload to the web server using the exploit.","Browsing to https://phoenix.htb/wp-admin/shell.phtml we get our semi-interactive webshell!"]},{"l":"Shell as wp_user","p":["First of all, lets get a real tty. Start a netcat listener on our kali machine:","Run a bash reverse shell from the webshell:"]},{"l":"Upgrade tty"},{"l":"Escape OTP","p":["Since we have some credentials extracted from the SQL injection I was trying to change user, however, the system would ask for a 2FA code:","I remember reading a blog article that recommended looking at where is the 2FA implemented. Sometimes it only asks for 2FA in a specific service or IP. Looking at the access configuration file I saw that it would allow access from the network 10.11.12.13/24. So probably we can circunvent the 2FA.","Running ifconfig revealed we are connected to that subnet via eth0:"]},{"l":"SSH shell as editor","p":["Lets SSH in to that network. I tried some credentials and the one that work was editor:superphoenix."]},{"l":"Backup files","p":["Enumerating the machine I see some interesting files in the /backups directory:","It seems that the system is creating a file every 3 minutes. I will transfer the oldest one to my machine for a closer look:","Decompress it:","Looking at the contents of the file I notice it is a backup of the mysql database. But how this is happening? I tried running pspy to monitor the processes running but no luck! Enumerated the cronjobs and got nothing!","Decided to go deeper in enumerating the machine when I found an interesting binary in the /usr/local/bin directory:","It is a binary and I cannot read it in plain-text. So I setup another tty with pspy running and executed the binary to see what is doing:"]},{"l":"Rsync privilege escalation","p":["The most interesing things to note above are:","It is changing directory to /backups","Running rsync to every file in the directory (probably using wildcard)","Looking at Hacktricks I could spot our privilege escalation path! The idea is to inject code since rsync might be using a wildcard to get all the file names. We can create a file that will add an argument to the rsync command and execute a bash script. The file shell.sh will make a copy of bash and set the SUID permissions to it.","The /backups directory should look like this. Now we just wait for the cronjob:","And here it is, we have a copy of bash with the SUID bit:","Lets get a root shell:"]}],[{"l":"Retired","p":["IP: 10.10.11.154"]},{"l":"Nmap"},{"l":"All ports"},{"l":"Service Scan"},{"l":"Enumeration"},{"l":"Port 80","p":["Running gobuster we find some more pages:","Accessing http://10.10.11.154/beta.html we are redirected to http://10.10.11.154/index.php?page=beta.html:","The page talks about uploading a license file of 512 bytes to get into the beta program. When pressing the SUBMIT button we note that it is sending a POST request to activate_license.php."]},{"l":"LFI","p":["So it seems that index.php is loading html pages from the ?page= parameter as we can see above. We can try to load some internal system files: http://10.10.11.154/index.php?page=/etc/passwd","To understand better how the website works lets see the index.php source-code:/index.php?page=/var/www/html/index.php","So here we have our local-file-inclusion vulnerability. Now lets see how the activate_license.php file works when we press the \"SUBMIT\" button:/index.php?page=/var/www/html/activate_license.php","Based on the source-code, it is loading the file we submit and sending the file size and file content to a service running on 127.0.0.1 - port 1337. But what is this application running on that port? Since we have a LFI vulnerability we can bruteforce the directory /proc/[PID]/maps to find out the applications running on the target. Using this technique we can find not only files and binaries running in the system but its memory address as well. I will use Burp Intruder module to do this task. We set the payload position like that:","And set the payload to sequential numbers like that:","So we will bruteforce PIDs from 1-500 and see if we get anything interesting:","We found a activate_license binary running on PID 424.","We can read the /proc/424/cmdline to check if the binary was started with arguments:","Yes, it seems to be the service running on port 1337 which receives the file we submit on the beta.html page.","We can download the binary for local analysis:"]},{"l":"Binary analysis","p":["Looking at the activate_license binary using Ghidra we can see 2 interesting functions.","main()","activate_license()","The main function starts a listening socket for incoming connections on a specified port. At the end it calls a function named activate_license(): main()","Based on the source code analysis, the first thing that called my attention was the 512 bytes buffer variable which matches with the website description of the license file size expected. The logic in the activate_license code seems to be:","Checks if the file size is valid and store it into a variable msglen","Reads msglen amount of bytes from the file contents and allocate into the buffer","If we could manipulate the file size to something bigger then 512(buffer size) we could potentially overwrite some addresses. Here we have a buffer overflow.","Continuing in the code logic, we see that it is writing the file contents to a database file.","Using the LFI we can find the database file license.sqlite. Lets download to analyse it:","Looking at the db file locally using sqlitebrowser we see one entry of 512 A's: It is writing 512 bytes to the database file, probably if we send 512+ bytes, the extra length will start to overwrite the memory address."]},{"l":"Buffer Overflow","p":["What do we know so far?","Buffer is 512+ bytes","Based on an analysis of activate_license.php for a valid POST request we need to send the license_size as 32 bit, big endian byte order before the content."]},{"l":"Finding the RIP","p":["To find the RIP (rewrite point) we will create a cyclic pattern to identify how many characters we need to cause the buffer overflow. Lets run the binary using gdb and start creating an exploit skeleton:","Exploit skeleton:","Running the exploit script we get a segmentation fault in the binary:","Now we look at what value has settled in the RSP register, and calculate the offset to RIP.","So we can send 520 bytes before overwriting the RIP. After exiting the debugger, it would be nice to forcibly kill all web server instances:"]},{"l":"Overwritting the RIP","p":["Let's check that we can actually overwrite the return address with an arbitrary value. To do this, we will write a simple Python script that will send 520 A's + 0xd34dc0d3 and check the RIP address:","Once again, start the binary with gdb and run the python exploit: Perfect!"]},{"l":"Exploit plan","p":["Before we continue lets check the binary protections:","We need to find a way to bypass NX. The most common way is doing a return-to-libc attack but in our case it will not work as we need a reverse shell call back. However, there is a technique that calls mprotect from the libc to change the stack mode into executable. So we can inject shellcode into the stack and get a reverse shell."]},{"i":"local---buffer-overflow","l":"Local - Buffer Overflow","p":["Based on the binary protections we can see above, we will not be able to execute shellcode in the stack because of the NX protection. However, there is a couple ways to circunvent that, one of them is a called \"ret-to-mprotect\" technique. Basically we can use mprotect to set the stack executable again. For that, we will need some memory addresses to build a ROP chain.","We can use GDB to load the binary and take a look at the memory addresses used. But first, I will turn ASLR off so it makes easier to build our exploit:","Load the binary into GDB:","Run the binary to listen on port 1337:","Now we can simply press CTRL + C to pause the execution and have a look at the addresses used with vmmap:","To build our ROP chain we will need the following address, where the arrows are pointing:","Libc base: 0x7ffff7c79000","Stack base: 0x7ffffffde000","Stack end: 0x7ffffffff000","With this addresses plus some gadgets we can make some system calls reusing small pieces of code, this technique is called ROP."]},{"l":"Finding the gadgets","p":["In order to achieve code execution we will need the following gadgets:","pop rdi","pop rsi","pop rdx","mprotect","jmp rsp","Make a copy of the libc used by the binary and use ropper to find the gadgets needed:","With all the addresses above we just need a shellcode to be executed after the jmp rsp call. We can use msfvenom to create a reverse shell","Done! Lets start building our exploit chain."]},{"l":"Final local exploit","p":["Putting all together:","We can see in the image below:","Terminal 1: GDB running the binary locally on port 1337","Terminal 2: Running the python exploit","Terminal 3: Netcat listener on port 1234","After running the python script we get our reverse shell back:","Perfect, it works locally, now we need to apply that to the target!"]},{"i":"remote---buffer-overflow","l":"Remote - Buffer Overflow","p":["In order to exploit this binary remotely we will need to update the exploit to match the target environment."]},{"l":"Updating the addresses","p":["The first thing we need to do is using the LFI to download the libraries used with the binary so we can extract the addresses needed for the ROP chain. Looking at the http://10.10.11.154/index.php?page=/proc/424/maps we can see the libraries loaded:","We can focus on these 2 libraries highlighted above and the stack address. We will use libc-2.31.so to extract most of the addresses for the ROP chain, however we will need a jmp rsp address that it does not exist in this library. Thats when libsqlite3.so.0.8.6 comes in handy. Also the stack start, stack end will be used.","We can easily download the libraries using curl:","Instead of typing all the ROP addresses manually, we will use the ROP function from pwntools. So we can simply load a library like that:","And simply search for gadgets like that:"]},{"l":"Final exploit","p":["Using the information we got from the LFI and using the libraries we just downloaded we can get to a final exploit like below:"]},{"l":"WWW-DATA user","p":["After the binary exploitation successfully done we get a sheel as www-data."]},{"l":"Privilege escalation 1","p":["Enumerating the system we find an interesting bash script /usr/bin/webbackup:","If we look at /var/www:","It seems that the user dev is making use of this script at every minute to make a backup of the web files.","Create symlink to user dev SSH private key:","It is a racing condition as the webbackup script will do a cleanup before zipping the files. We need to constantly being creating this symbolic link when the time comes.","Until finally the script is triggered and we can unzip the backup file containing the user ssh key:","Reading the private key:","We can use this key to SSH in as dev:"]},{"l":"Privilege escalation 2","p":["As we SSH in as dev we see some interesting files and fodlers in the home directory:","The emuemu directory:","The emuemu binary is also found at /usr/lib/emuemu/:","We can read the source-code, not very interesting though:","We also see a reg_helper binary there and we can have a look at the source-code. The interesting part here is that this file is owned by root! /home/dev/emuemu/reg_helper.c:","It seems that the reg_helper is using /proc/sys/fs/binfmt_misc/register to run some commands. At first I didn't know much about binfmt_misc so I did a bit of research and learn the basics of usage.","Based on Wikipedia, binfmt_misc( Miscellaneous Binary Format) is a capability of the Linux kernel which allows arbitrary executable file formats to be recognized and passed to certain user space applications, such as emulators and virtual machines.It is one of a number of binary format handlers in the kernel that are involved in preparing a user-space program to run.","We can check how EMUEMU is used:","So files that starts with that \"magic\" signature will be interpreted by /usr/bin/emuemu."]},{"l":"Road to root","p":["During my research I found this github repository which is a POC to exploit this functionality. We can make a copy of that and do some modifications to make it work for us. Modify the last line:","Final exploit:","And we are root!"]}],[{"l":"Routerspace","p":["IP: 10.10.11.148"]},{"l":"Enumeration"},{"l":"Nmap","p":["We start running nmap in all ports:","Then we run nmap with safe scripts on open ports:"]},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Accessing http://10.10.11.148/ we land on what it looks like an Android application website with the title \"RouterSpace\": We can download the Android app from the \"Download Now\" button."]},{"l":"Install Anbox","p":["Next we will install Anbox using snap so we can have a look at the requests while we play with the app:","Start Anbox:","As the Anbox emulator starts we can look at the IP address assigned to it, we will need it later to configure Burp. We can go to Settings -> About emulated device -> Status:","Check if we can connect to the emulator via ADB:"]},{"l":"Install RouterSpace application","p":["Lets install the RouterSpace application in the emulator:","Good! The application is now installed:"]},{"l":"Setup Burp to capture Anbox traffic","p":["Now we just need to setup Anbox to send its traffic through Burp. Anbox created a new interface in the 192.168.250.1/24 which is where the application will comunicate:","We can setup Burp proxy as follows:","And then we configure the emulator to send the traffic through that address:"]},{"l":"Intercepting request in Burp","p":["Now we can start the RouterSpace app in the emulator. There is only one button \"Check Status\". When we press that button we can see in Burp that it sends a POST request to http://routerspace.htb/:","We add this entry to our /etc/hosts file so the request can find the IP:","We can now use the repeater tab in Burp to resend the same request: The server response the same value sent in the ip parameter and with an \\n indicates that it could be vulnerable to command injection.","We confirm the injection appending commands to the ip parameter:"]},{"l":"Exploitation","p":["We can send commands as the user paul, maybe we can create an SSH key and save to his authorized_keys file. Create a new SSH key:","Using the RCE vulnerability, upload the generated paul.key.pub key into paul/.ssh/authorized_keys:","Now simply SSH in using the private key:"]},{"l":"Privilege Escalation","p":["Enumerating the files in the system we find the source code of the web application, including a potential credentials for paul:","However running sudo -l to check the user privileges and trying this password did not work!"]},{"i":"sudo---vulnerable","l":"Sudo - vulnerable","p":["We can verify the sudo version:","This version of sudo is vulnerable to the classic CVE-2021-3156: Heap-Based Buffer Overflow in Sudo (Baron Samedit). There is a POC here and we can check if it is vulnerable running sudoedit -s Y, if it asks for a password then it is likely to be vulnerable:","Looks like it is! Lets clone the repo and upload the exploit:","We have to use SCP to upload the files as it seems that there is some IPTABLES rules preventing us from accessing other ports.","Now we compile the exploit and execute:","And we are root!"]}],[{"l":"StreamIO"},{"l":"Enumeration"},{"l":"Nmap","p":["Nmap all ports:","Nmap safe scripts on open ports:","I see there is a couple of DNS entries in the output of port 443:","DNS:streamIO.htb","DNS:watch.streamIO.htb","We can add those to our /etc/hosts file:"]},{"i":"streamio---port-443","l":"StreamIO - Port 443","p":["Browsing to https://streamio.htb the page loads an Online Movie Streaming service. There is a login page where it asks for username and password at https://streamio.htb/login.php.","We can use Burp to intercept a login attempt and save it to a file where we will use sqlmap to check for sql injections:","SQL injection found in username parameter:","Since the sql injection is time-based it is taking a very long time to retrieve data.","Dumping the databases:","At this point we can start guessing some of the table names to make it quicker. For example, we can guess that there is a table called \"users\" in the STREAMIO database, as the name indicates it is the web app with the login page.","Dumping the table users from STREAMIO db we see that there is 33 users, it will take forever to finish. Anyway, here is the syntax:","We get a lot of users and password hashes. Trying to crack them with Crackstation we end up with:","We can use this credentials to login to https://streamio.htb/login.php. Logged in as yoshihide not much changed in the website, running gobuster we find the /admin endpoint."]},{"l":"LFI to RCE","p":["Browsing around at https://streamio.htb/admin/ we see that all the pages ends with a parameter:","https://streamio.htb/admin/?user=","https://streamio.htb/admin/?staff=","https://streamio.htb/admin/?movie=","https://streamio.htb/admin/?message=","We can fuzz it to see if we can find some more. Using wfuzz we specify the --hw 131 to hide all responses with 131 words, -b PHPSESSID to specify the admin cookie and -w the wordlist used.","After some testing, we find the debug parameter is vulnerable to LFI:","Using the PHP filter trick we can extract some of the web pages source code. The important parts here are in the source code of: https://streamio.htb/admin/?debug=php://filter/convert.base64-encode/resource=index.php","So we have the database username and password, but how to use it? After getting stuck here for a while I decided to fuzz the file name in the LFI to see if I can get more source code:","Cool, we have a master.php file as well! Doing a bit of code analyses in this file we finally see the path to get a shell. The file master.php is using the function eval like this:","The code logic above simply says that if a user sends a POST request to master.php with data different than index.php in the parameter include it will pass to eval. It is a RCE vulnerability."]},{"i":"rce---foothold","l":"RCE - Foothold","p":["We can base64 encode our code to be passed to eval like this:","The above will include a new parameter that we can use to run system commands in the master.php file.","And then we can send system commands like this:","We learn that we are in the directory C:\\inetpub\\streamio.htb\\admin. To get a reverse shell here we can just upload netcat and then run netcat remotely to send us a reverse shell.","If the upload fails, the directory C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe is always a good one to upload files as it is often whitelisted by the AV.","Using the same Curl command as above we can change the cmd= value to:","Receiving the reverse shell:"]},{"l":"Shell as yoshihide"},{"l":"Enumerating the machine","p":["Enumerating users:","We can see that Martin is member of Administrator group:","We might need to find a way to escalate from yoshihide to Martin or Administrator.","Enumerating the network - Ports listening:","If we compare the ports here with the ones we got in the nmap port scan we will find some differences. One of them is the port 1433 (MSSQL) is listening internally only and we have the credentials for the database. We can use chisel to forward this port to our machine so we can use some pentest tools."]},{"l":"Forward MSSQL port to our local machine","p":["Download chisel for linux and windows:","Start chisel server in our machine:","Upload chisel for windows to the target and forward port 1433:","Now we can connect to MSSQL using the credentials we found earlier:","Enumerating the databases:","Lets dum the users table of streamio_backup database:","The important credentials found here is nikk37 user as it is also a user in the machine. Using Crackstation we can crack the password:"]},{"l":"Shell as Nikk37","p":["Using nikk37 credentials we can connect to the target via WinRM:","Get the user flag:","Enumerating nikk37 files we find a Firefox database file key4.db and 2 interesintg json files, logins.json and logins-backup.json:","We use Evil-WinRM to download to our machine and then try to crack it:","Download logins.json","We can use Firepwd tool to crack the DB:"]},{"l":"SMB password spray","p":["Now that we have many users and passwords we can use crackmapexec to do a password spray. I got all the users we found so far in a file called users.txt and the same for passwords and put it in password.txt:","Very important to use --continue-on-success flag, otherwise crackmapexec will stop when he finds a valid login.","Cool! We got one more credentials, for jdgodd user:"]},{"l":"Bloodhound","p":["We still don't know the path to martin or administrator. Lets run Bloodhound to map the AD for us and show some graphs! Run SharpHound in the target to extract the data:","Download the loot to our machine:","Start neo4j server:","Start Bloodhound, login to neo4j and import the loot (simply drag-and-drop the .zip)!","Mark the user we owned: I also marked martin as a High Value. From the Bloodhound output there is no direct path from nikk37 to admins accounts.","We have jdgodd password, so lets mark him as owned too. As we select the \"Shortest Path to Owned Principals\" we finally see tha path to Administrator:","The user jdgodd has WriteOwner privileges over \"CORE STAFF\" group. Whoever is a member of CORE STAFF group can read the LAPS! What is LAPS? The \"Local Administrator Password Solution\" (LAPS) provides management of local account passwords of domain joined computers. Passwords are stored in Active Directory (AD) and protected by ACL, so only eligible users can read it or request its reset."]},{"l":"Privilege Escalation","p":["First lets upload PowerView:","Disclaimer: For some reason only the PowerView.ps1 script from the dev branch work.","Now we create the creds to use and set a Domain Object Owner to jdgodd:","Give jdgodd all the rights and add him as a member off CORE STAFF:","No errors so far, lets check if it works:","Great! Lets dump LAPS:","Alternatively we can use crackmapexec to dump LAPS:","Now we can get a shell as Administrator using Evil-Winrm:","We are Administrator!"]},{"l":"Post Exploitation","p":["Dumping the secrets"]}],[{"l":"Talkative","p":["IP: 10.129.199.0"]},{"l":"Nmap","p":["Port 80 redirects to talkative.htb, lets add it to our hosts file:"]},{"l":"Reconnaissance"},{"l":"Port 80","p":["Looking at the source-code we see multiple indicators that is Bolt CMS:"]},{"l":"Port 8080","p":["Jamovi 0.9.5.5 is running on port 8080:"]},{"l":"Port 3000","p":["Rocket Chat running on port 3000:","Since we don't have credentials yet lets register a new account:![[images/image12.png]]","As soon as we register and login with the credentials caue:password123 we see that the admin joined the channel. His name is Saul Goodman:","Nothing much to do here now, but lets keep in mind these details!"]},{"l":"Foothold","p":["We can go to port 8080, open RJ editor:","Add this line and press CTRL+SHIFT+ENTER to execute ruby command to get a shell:","We are root inside a docker container:"]},{"l":"Container IP","p":["The container is lacking of network tools but we still can get the IP using hostname:"]},{"l":"Port Scan","p":["Lets scan the ports open with a one liner bash script:","We have the following ports open:","41337","41338","41339","50218"]},{"l":"Finding credentials","p":["We can find some interesting files under /root directory:","The file bolt-administration.omv is a compressed zip file, we can decompress and see its contents:","I will encode the file to base64 to transfer to my local machine:","Local machine:","Inside the xdata.json file we can find usernames, emails and password:","With the credentials above we can try to reuse them in the other services running."]},{"i":"port-80---bolt","l":"Port 80 - Bolt","p":["Running a gobuster on port 80 revealed a login portal for Bolt CMS:","We can login as admin reusing one of the passwords found previsouly:"]},{"l":"Exploit Bolt","p":["We can go to Configuration -> All configuration files and edit bundles.php adding a reverse shell there:","I used the php reverse shell that is pre-installed in Kali: /usr/share/laudanum/php/php-reverse-shell.php. And change my IP and PORT:","As we save the file and click in the Bolt Dashboard, the reverse shell is triggered.","We are inside another docker container as www-data. This time we are in 172.17.0.11"]},{"l":"Escape the docker container","p":["I got stuck for a while in this part until I realised that maybe we could SSH into another container. So far we have the following credentials:","Username","Password","matt","jeO09ufhWD<s","saul",")SQWGm>9KHEA","janit","bZ89h}V<S_DA","We have been to 172.18.0.2 and now we are in 172.17.0.11. We can try to SSH to the main host 172.18.0.1 as one of the users."]},{"l":"SSH as saul"},{"l":"Host enumeration","p":["We can see the routes assigned in this machine.","I wonder if there are other hosts in that docker0 interface. Lets enumerate. Downloaded nmap static binary from here and uploaded to the target machine.","Scan the network 172.17.0.0/24:"]},{"i":"1721702---open-ports","l":"172.17.0.2 - Open ports","p":["27017 is the default port for MongoDB as we can see here.","Uploaded pspy to monitor the processes and got something interesting:","So connecting the dots we could assume there is a MongoDB running there! Lets use chisel to forward this port to us! In Kali:","In target:","Install MongoDB client in Kali:","Now we can connect:","List the databases:","Lets see wha is insede the admin database:","Lets dump system.keys table:","Nothing too interesting, lets see the meteor database which seems to have more data:","It is the Rocket Chat database. Let's see the users table:","Now we are talking! Let's change the admin bcrypt hash so we can access the web application. What we can do is copy the password hash from caue user that we know it is password123 and update the admin password hash with the same.","Done! Now we can login to Rocket Chat on port 3000 with the credentials admin:password123."]},{"l":"Rocket Chat","p":["We can get the Rocket Chat running going to the Administration panel:","Doing a bit of research I find that for this version we can simply create a webhook to spawn a reverse shell.","Browse to http://talkative.htb:3000/admin/integrations/new.","Select \"Incoming WebHook\".","Fill the details as below:","Script:","Press \"Save Changes\" and then click on \"Integrations\" on the left menu. It will load the page again with a \"Webhook URL\" and \"Token\". Copy the \"Webhook URL\" and curl it! It will trigger the reverse shell:"]},{"l":"Oh no... another container","p":["We get the Rocket Chat reverse shell and we are inside another container:"]},{"l":"Shocker to root","p":["We can use this exploit"]},{"i":"etcshadow","l":"/etc/shadow","p":["Modify the line 130 and 133 of shocker.c","Line 130: /etc/hostname","Line 133: Select the file you would like to read","Compile:","Use base64 to send the file over:","In the target:"]},{"i":"roottxt","l":"root.txt","p":["First we modify the following lines of shocker.c:","Compile:","Use base64 to send the file over:","In the target:"]}],[{"l":"Find The Easy Pass"},{"l":"Challenge description","p":["Category","Level","Description","Reversing","Easy","Find the password (say PASS) and enter the flag in the form HTB"]},{"l":"Downloading files","p":["For this challenge it is given only one executable file:","EasyPass.exe"]},{"i":"installing-wine--ollydbg","l":"Installing wine & ollydbg","p":["Since this is a Windows executable, lets use wine to run this application. In case you don't have wine installed, this is what you should do:","Now we can simply run wine EasyPass.exe and the application will load:","We also need a debugger that works for Windows executables, there are many out there but I will be using Ollydbg. Remember that Ollydbg requires wine to run. Installing Ollydbg:"]},{"l":"Ollydbg","p":["First thing lets have a look at the string that are longer than 10 characters, maybe we can quick find some passwords or something like that:","No luck.","To start Ollydbg simply run:","We can go to File -> Open -> (select the EasyPass.exe file)"]},{"l":"Strings","p":["Now that we have the file loaded lets search for some strings.","Right click","Go to \"Search for\"","Click on \"All referenced text strings\"","We see:","Good job. Congratulations","Wrong Password!","So it seems that these are the message sent in case of right or wrong password entered. Double-click in the \"Good job\" to see where it is implemented."]},{"l":"Analysis","p":["CALL EasyPass.404628 calls a function sub_404628. We currently don't know what this functions does, but the outcome of it decides whether we get a \"Congratulations! Good Job\" message or the \"Wrong Password\" one (jnz = Jump if not zero to the \"Wrong Password\" part, else continue to \"Good Job\"). We can select the CALL EasyPass.404628 and press enter or right-click and \"Follow\" to see more of the function:","It's basically just comparing two values (EAX and EDX). Depending on their equality, we get a zero flag or not:","All we need to do now is find out what is the JNZ comparing to and we could potentially find the password. Lets set a breakpoint in the CALL just before the JNZ.","Select the line and press F2.","Now lets run the application clicking in the Play button. We can enter anything when prompted for a password:","As soon as we press the \"Check Password\" button we hit the breakpoint. If we look at the registers we can spot the two ASCII that are probably being compared to define if the password entered is good: The program is comparing EAX (user input) to EDX (password in memory). We can confirm that running the program again and entering fortran! in the password field and we get the \"Good Job\" message."]}],[{"l":"WAFfle-y Order","p":["Category: Web Level: Medium"]},{"l":"Code Analysis","p":["Checking out the index.php we find the PHPSESSID cookie is serialized:","In OrderController.php we find the deserialization:","Before the deserialization the cookie is sanitized by safe_object method. It checks for unsafe functions starting with __:","Having found the deserialization vulnerability, the next step is to find classes that can be exploited by the deserialization vulnerability.","There is a XmlParserModel class and the __wakeup method, which is called when the object is deserialized:","In sum, exist a __wakeup method in XmlParserModel and object variable $data with simplexml_load_string is used as XML parsing. When deserializing, the vulnerability can give $data variables arbitrary values that can be created by external entities XXE.","However, when $data is including external entities, it will be replaced by the regular expression /!(?:DOCTYPE|ENTITY)(?:\\s|%|#[0-9]+;|#x[0-9a-fA-F]+;)+[^\\s]+\\s+(?:SYSTEM|PUBLIC)\\s+[\\'\\]/im matches, resulting in the call die and return Unsafe XML. For this, you can UTF-8 encoded XML document converted to UTF-16 coding"]},{"l":"METHODOLGY","p":["When making the call, the server checks if the cookie is “safe” with safe_object(). The method finds all matches of serialized objects and gets their respective class methods. If any of the class method contains __ at the beginning (for magic methods exploits), the program dies.","Decoded cookie, the ErrorException contains magic method __ construct: O:14:\"ErrorException\":1:{s:8:\"username\";s:10:\"guest_614c\";}","To bypass this restriction, I studied this writeup: https://github.com/MegadodoPublications/exploits/blob/master/composr.md#the-moderately-cool-way-that-works","Objects that implement the Serializable interface contain two methods serialize and unserialize. When serializing such an object a string of the following format will be returned:","Creating a serialized string in this format for an object of a class that doesn’t implement Serializable will work but the deserialized object will not have any class members set. It is thus not very useful for our purposes but it does lead the way to a final working exploit.","Notice the : before O. This prevents the regex from matching. Part of the payload is going to look like this. $pay is our serialized payload object."]},{"l":"XML WAF bypass","p":["We will serialize XmlParserModel class. It has __wakeup magic method, and calls simplexml_load_string() which we will exploit. With this method, we can do XXE, but have to first bypass the regex check. The LIBXML_NOENT option allows us to use XML entities.","To bypass the regex, I use UTF-16 encoding on the XML payload. The simplexml_load_string() does whats its told to do, and the regex just don’t know what’s going on and lets the payload through."]},{"l":"DTD OOB exfiltration","p":["Free from restraints, we can finally do the XXE with OOB DTD (inspiration). The challenge is internet-enabled. I’m going to fetch the DTD from ngrok which I tunnel to my machine where I host the DTD file. The DTD reads the flag file and make a call to my internet webhook, where a GET parameter contains the flag."]},{"l":"Exploit","p":["Lets create 3 files. In exploit.py we generate php serialized payload and encode using base64. URL encoding is done inplicitly in requests. Insert payload into cookie and make the API call.","In php_pay.php we create and xml paylod that will be interpreted by simplexml_load_string(). We tell it to fetch our malicious DTD and execute it. Then we convert the xml into UTF-16BE, serialize it and paste it into our predefined serialized structure.","In malicious.dtd we tell the system to get contents of /flag and encode it using base64. We have to use base64 encoding because the file contains a newline at the end, and the xml entity doesn’t like that. We then instruct the system to make and http call to our webhook which contains the flag as a GET parameter."]},{"l":"FLAG","p":["Now we just need to run exploit.py and get the flag in the webhook."]}],[{"l":"Homeless","p":["Name","Homeless: 1","Date release","6 Dec 2017","Author","Creatigon","Link","https://www.vulnhub.com/series/securecode,445/"]},{"l":"Goals","p":["You will be required to break into target server,exploit and root the machine, and retrieve the flag. The flag will contain more information about my private info..","Machine IP: 192.168.26.132"]},{"l":"Recon","p":["Running Nmap we see that there are 2 ports open, 22 SSH and 80 HTTP:"]},{"l":"Port 80","p":["Looking at the website on port 80 I see an interesting thing on top of a image, what seems to be my User-Agent:","Maybe we can inject some code there changing the User-Agent. First thing to check is what framework the website is built on. When trying to access http://192.168.26.132/index.php I got a 200 OK response and the site loads.","So now we know that the website is built on PHP lets try to inject some code.","After trying for a couple minutes, nothing, except XSS, works."]},{"l":"Favicon","p":["Another interesting thing is the webpage icon, it does look weird:","Looking closer http://192.168.26.132/images/favicon.jpg:","Hard to read but if we put the words that are on the top of the image “Cyberdog Sledding Portal” in the User-Agent header it give us a hint to another page.","\uD83E\uDD28 This part of the machine I didn’t like much, very unrealistic."]},{"l":"Upload File","p":["Accessing http://192.168.26.132/myuploader_priv/ we get a file upload form:","Trying to upload a php reverse shell gives me an error saying that the file is too large:","Even trying the smallest RCE in PHP I know ?=$_GET[1]? was being flagged as too large. However, how about this:","It is only 8 bytes!! Uploading the file called test.php works!","Accessing http://192.168.26.132/myuploader_priv/files/test.php lists the files in the current directory:","Lets read that hash file:","It is a hint to the next step."]},{"l":"Sign in","p":["http://192.168.26.132/d5fa314e8577e3a7b8534a014b4dcb221de823ad/","I clicked on “Need hint?” after trying several techniques and failed. It give us the source code of index.php:"]},{"l":"Code Analyses","p":["The authentication mechanism of the form is to check the md5 hashes of the three provided values, compare them and return a valid session in case the hashes are identical. The trick here is that you can’t just pass equal values on the form and get the same md5 hashes as there is a pre-check that validates the input and requires the values of the fields to be different.","So what we need here is to either steal someone else’s session or generate real md5 collisions","The solution is to generate md5 collisions using a collision generator like Python MD5 Collision Library by Stephen Halmor hashclash by Marc Stevens to generate a pair of collisions and attach them to the POST query as binary data."]},{"l":"Generating MD5 Collision","p":["Here is the Python library to use:","https://github.com/thereal1024/python-md5-collision","Now how do we pass this to the web server? The easiest way is using Curl!","Adding the cookie to our PHPSESSION we can access http://192.168.26.132/d5fa314e8577e3a7b8534a014b4dcb221de823ad/admin.php:","From here we have code execution on the machine:","Lets get a reverse shell:"]},{"l":"Shell as WWW-DATA","p":["We are in.","Poking around I find a file called todo.txt in the /home/downfall/ directory:","The hint talks about python.","What we are looking for is a python script with insecure file permissions belonging to the downfall group, or a script where the owner is root and the file is of a different group:","The above screenshot shows that the user downfall (belonging to the downfall group) has write privileges to this file. The files’ contents suggest that this may be a script called via a cron job, and the chances of it being run as root are high.","Connecting the dots from previous enumeration, specifically the contents of the robots.txt file (remember rockyou), and now having a username means that we might have to use the rockyou.txt wordlist on the user downfall and try to brute force the password."]},{"l":"Bruteforce SSH downfall user","p":["The creator of this VM is kind enough to suggest that the password starts with “sec”. Lets generate a wordlist based on rockyou.txt with only words that start with “sec”:","Bruteforce SSH using Hydra:","Found the password:","Ok, lets SSH in as downfall user and password secretlyinlove:"]},{"l":"Way to root","p":["Reading the file .secret_message we get a hint into how escalate to root:","Below I used PSPY to monitor the processes and confirmed that homeless.py is being called from the cronjob with UID 0 (root):","Since homeless.py does not have “execution” permissions and only root can change it, we need to create a new file:","Moved homeless.py to homeless.py.bak.","Created a new file called homeless.py and added a bash reverse shell:","Started a netcat listener on my local machine and wait for the cronjob to trigger:","We are root!"]}],[{"l":"Pipe","p":["Name","/dev/random: Pipe","Date release","2 Oct 2015","Author","Sagi-","Link","https://www.vulnhub.com/entry/devrandom-pipe,124/"]},{"l":"Machine Info","p":["Machine IP: 192.168.26.130"]},{"l":"Start of enumeration","p":["GET requests to http://192.168.26.130/index.php are redirected to index.php and asks for credentials. Changing the request to POST or even something that does not exist like \"GETS\", we can bypass and get the index.php page.","Looking at the source-code we find an interesting JS file:","Accessing http://192.168.26.130/scriptz/ we can find more files.","The file log.php.BAK file seems to be a logger:","Looking back to the index.php source-code we can see the parameters that are submitted in the form:","We now intercept the request for “Show Artist Info” in burp:","Decoding the param value:","It seems that in this case a Info type object is being created. We know that a Log object will invoke the logger file and allow us to write to the webroot. We now attempt to tweak the request so that we can write some data to the webroot via the Log object."]},{"l":"Writing to disk via parameter","p":["Lets attempt to write a simple php web shell to /scriptz/rce.php:","It works! Our rce.php file is there."]},{"l":"Reaching RCE","p":["The remote command execution can be triggered via http://192.168.26.130/scriptz/rce.php?cmd=id"]},{"l":"Reverse Shell","p":["Getting a reverse shell is trivial:"]}],[{"l":"SecureCode1","p":["Name","SecureCode: 1","Date release","23 Feb 2021","Author","sud0root","Link","https://www.vulnhub.com/series/securecode,445/"]},{"l":"Goals","p":["Bypass Authentication → flag1","Obtain Remote Command Execution → flag2","Write your PoC code that chains the exploitation of the discovered vulnerabilities"]},{"l":"Machine Info","p":["Machine IP: 192.168.26.129 Source Code: http://192.168.26.129/source_code.zip"]},{"l":"Analyzing the PHP code","p":["After a long time reading the source code and playing with the web application to understand its logic I finally found something interesting, an SQL injection point.","Vulnerable PHP file ( viewItem.php):","The vulnerability is at line 18:","It is part of a GET request: http://192.168.26.129/item/viewItem.php?id={PAYLOAD}","The id parameter does not have single/double quotes around it which makes it easier for injection."]},{"l":"Extract data from the database via bruteforce","p":["Since we have access to the source code and we know the database and tables names, we can skip the discovery of this part and go straight to data extraction via SQL injection.","File db.sql of the source code provided:","We can start by sending a SQL query to return all entries in the user table that has id_level=1, admin privileges, and check if the first letter of the entry start with “a”. We also add the limit 1 to make sure it will return only one entry, in case there are more then one users with id_level=1.","However, the single and double quotes are being filtered by mysqli_query() function:","One workaround is using the ascii table. So instead of comparing it to the letter “a” we will compare it to “97” and wrap the SQL query into ascii function.","The final query to check if the admin level username starts with letter “a” would look like this:","The GET request look like this:","Response: HTTP/1.1 404 Not Found.","This actually means that the comparison is correct, otherwise we would be redirected to the login page based on the viewItem.php code here:","Line 22 code logic: If a query to an existing id returns true, send a 404 response.","From that we can confirm that the comparison is correct or not based on the response code."]},{"l":"Automate the blind SQL bruteforce","p":["Lets automate this process with a Python script.","Running this script we get the following:","The password give us a hint that we need to reset it before move on."]},{"l":"Forget Password Token","p":["Sometimes when we send a “Forgot my password” request, the web application will create a token and store in the database. Since now we can dump the database via SQL Injection we can retrieve the token generated.","Analyzing the code below, we note that when we reset the password, it will generate a token of length 15. Also note that the function send_email() is leaking the link we need to access to reset the password when we have the token.","Basically what we need to do is:","Reset the password for admin","Adjust our script to dump the token generated for admin","Visit http://192.168.26.129/login/doResetPassword.php?token={TOKEN}","To dump the Token we just need to modify the main() of our script as below:","Running the script we get the following response:","Visit “http://192.168.26.129/login/doResetPassword.php?token=xxtax6edS5U3hch” to reset the admin password!"]},{"l":"Logged as Admin","p":["We have access to admin account. Poking around we see that we can create new items and upload files that are used as the item image."]},{"i":"add-new-item-or-update-item","l":"Add new item OR Update item?","p":["Looking at the code newItem.php we notice the following logic to upload a file:","If the file is not in blacklisted_exts and is in mimes it will be uploaded.","However, looking at updateItem.php code, we noticed that there is no mime type whitelist, only extensions blacklist! Much easier to bypass and upload a malicious file!","Another thing to note is that there is no blacklist for the extension phar.","Phar files can execute PHP code. We could upload the following shell.phar file:","Or could even be more direct to a reverse shell:"]},{"l":"Chaining all together in a Python script","p":["In order to create a script to chain all these vulnerabilities and return a shell we will need to manage a login session so we can use the authenticated cookies to perform other tasks. The final script is as follow:"]},{"l":"Recap of the vuln chain","p":["Reset the admin password","Extract the reset password token via SQL injection in viewItem.php?id","Use the token to set a new password and login to the admin portal via /login/doResetPassword.php, /login/doChangePassword.php and /login/checkLogin.php","Upload a malicious .phar file updating an existing item via /item/updateItem.php","Get a reverse shell via file uploaded at /item/image/shell.phar?cmd=","All we need to do now is start a netcat listener on port 4444 and execute the script."]}],[{"l":"Serial 1","p":["Name","Serial: 1","Date release","20 Aug 2019","Author","sk4","Link","https://www.vulnhub.com/entry/serial-1,349/","Goals Get root permissions and user/root flags.","I started off by downloading the machine from Vulnhub and running it with VmWare."]},{"l":"Recon","p":["The first thing to do is find out what is the IP address of the machine. Since both, my attacking machine and the target machine, are in the same network (NAT) I decided to simply run sudo netdiscover -r 192.168.150.1/24:"]},{"l":"Port Scan","p":["Now that we have an IP address, lets do a port scan using Nmap.","From the Nmap scan we can see only 2 ports open, 22 SSH and 80 HTTP.","Port 22: Running OpenSSH 7.9 Ubuntu 10.","Port 80: HTTP server running Apache 2.4.38.","Lets have a look at the website running on port 80."]},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Browsing to the website on port 80 and I got a greeting message to the user sk4 hinting that they are testing the cookies. I immediately opened the browser console to see if there is anything in there.","This looks like base64, lets decode it:","We can see that it is a PHP serialized object in the cookies. In fact, there are 2 objects references in there. The first one is a User object with username=sk4 and Userwel receives a Welcome empty object.","Deserialization can be dangerous leading to RCE if not implemented correctly. However, we don't have much information on how this website works. Lets run a Gobuster to see if we can find some directories and files."]},{"l":"Gobuster","p":["Running gobuster we find an interesting directory called /backup:","Browsing to that directory we see a bak.zip file we can download.","Downloading and unzipping we get 3 files of what seems to be the source code of the website."]},{"l":"Code Analysis","p":["Analysing the code of the file index.php we can see that it is including user.class.php. Then checking if a cookie user exist and if not creates a new object of User with the value of sk4. So that explains why we were greeted with the name of sk4 whe we access the website the first time. In the line 6, the code logic continues, and if a cookie exists it will be deserialized withou any sanitization. Dangerous!!","Looking at the user.class.php file I noticed the inclusion of the log.class.php which is responsible for the variable $val in the Welcome class.","Looking at the log.class.php code below I noticed the parameter type_log is not assigned any value. Also, the __construct function will be called when the file loads, in this case, whenever the user.class.php is loaded too since it is including this file. The handler function is \"echoing\" the value of $val. So maybe we can modify the cookie to reference the Log class instead of the Welcome and make it read some internal files."]},{"l":"Exploitation","p":["To exploit this deserialization vulnerability we will need to chain the classes so we create a cookie with the object Log and assign the value of the file we would like it to read."]},{"l":"Modification 1","p":["In the log.class.php file we assign a value to the type_log variable. Lets try to read /etc/passwd:"]},{"l":"Modification 2","p":["In the user.class.php we have modify the __construct function to assign new Log() instead of new Welcome() in the $wel variable. We will add one line of code at the end to generate a serialized object using the new settings. The serialized object will be our cookie that we will send to the server and it will return a internal file.","We can test running the index.php and we get our own /etc/passwd file. So this mean it is working.","To generate the cookie we can run user.class.php and it will create a serialized PHP object with the modifications we did previously:"]},{"l":"Reading Local Files","p":["Adding the generated cookie to the browser and refreshing the page we can see the server /etc/passwd file:","Great! So now we reached local file inclusion through PHP object deserialization.","Ok, good, but every time we want to read a file we need to generate a new cookie and refresh the page again. What if we point the type_log variable to our machine so it would include our PHP file."]},{"l":"Remote Code Execution","p":["First we create a simple PHP web shell and call it rce.php:","Use Python to start web server and host the file:","Now all we need to do is to modify the variable type_log to point to our hosted file, generate the cookie, add the cookie to the browser and refresh the page.","Modify the variable","Generating the new cookie","As soon as I added the new cookie in the browser and refreshed the page I got a hit in the Python webserver to fetch the rce.php file.","Now we can run commands using the cmd parameter. Browsing to http://192.168.150.133/index.php?cmd=id outputs the user id:"]},{"l":"Reverse Shell","p":["I will base64 encode a bash reverse shell to execute in the target machine:","Now I can send the following command:","URL encode the spaces:","Start a netcat listener, send the command in the browser, and we have a shell:"]},{"l":"Shell as www-data"},{"l":"Enumeration","p":["Listing directories in the system I found an interesting file that we can read, /credentials.txt.bak:","From here we could either change user to sk4 using its password, or SSH in, both works."]},{"l":"Shell as sk4","p":["Now that we have credentials for user sk4, lets see if he can run any sudo command:","Yes!"]},{"l":"Privilege Escalation to Root","p":["The user sk4 can run vim as sudo. There is a very easy way to escape vim into a shell:","And we are root!"]}],[{"l":"Delegate","p":["Link: https://www.vulnlab.com/machines","Name","OS","Level","IP","Windows","Medium","10.10.88.149","Summary:","Bruteforce SIDs (unauthenticated) to find list of domain accounts","Find user credentials in shares","User has GenericWrite rights over another user -> Targeted Kerberoasting","Unconstrained delegation + Relaying Kerberos"]},{"l":"Enumeration"},{"l":"Open ports","p":["We start running Nmap to find the open ports and services running in the machine Delegate:","Based on the output we can assume a few things:","The machine is likely to be a domain controller","Port 3389 is displaying DNS records that we can add to our /etc/hosts file","Clock-skew is 1s, which should be ok when communicating to Kerberos","Lets add the domain to the /etc/hosts file:"]},{"l":"Bruteforce account SIDS","p":["1104","1105","1106","1107","1108","500","501","502","A.Briggs","Administrator","b.Brown","Guest","J.Roberts","krbtgt","N.Thompson","R.Cooper","SamAccountName","SID","The output show the following user accounts that could be potential targets in future:","Using impacket-lookupsid we can bruteforce the accounts SIDs and retrieve some data, including user account names:","We also get the Domain SID:","We don't have credentials for any of these accounts. From here we could try a password spray, but lets keep enumerating and keep that in mind for later."]},{"l":"SMB Shares","p":["We can use crackmapexec with any username as long we don't enter any password to list the shares:","No interesting share name here, however, we can read IPC$, NETLOGON, and SYSVOL.","Accessing the NETLOGON share we find a batch file with credentials:","Looks like to be A.Briggs password. We can confirm trying to authenticate to SMB:","With valid credentials we can get a full list of the domain accounts:","Nothing new compared to impacket-lookupsid output."]},{"l":"Bloodhound","p":["Bloodhound is the next thing we can do to get a better understanding of the environment and the compromised user rights:","We import the Bloodhound data, mark the user A.Briggs as owned and start analysing the attack path. The user \"A.BRIGGS\" has generic write access to the user \"N.THOMPSON\". From the perspective of the attacker, the compromised user \"A.BRIGGS\" can abuse this to add a new SPN to the user \"N.THOMPSON\" and kerberoast that account."]},{"l":"Initial Foothold"},{"l":"Targeted Kerberoasting","p":["We can save the hash into a file and attempt to crack offline:","Cracked! User \"N.THOMPSON\" can PSRemote into the DC1, lets get a shell using its credentials and start enumerating:","From a simple whoami /all we can see a possible attack vector, unconstrained delegation:","User is member of the group \"Delegation Admins\"","User has the privileges \"SeMachineAccountPrivilege\" and \"SeEnableDelegationPrivilege\" which allow adding workstations to the domain and enabling computer and user accounts to be trusted for delegation","For this attack I will be following this article called \"Relaying Kerberos - Having fun with unconstrained delegation\" written by Dirk-jan Mollema."]},{"l":"Privilege Escalation","p":["Based on the article, here are the requirements for the attack:","Control over an account with unconstrained delegation privileges","Permissions to modify the servicePrincipalName attribute of that account","Permissions to add/modify DNS records","A way to connect victim users/computers to us","Since the compromised user \"N.THOMSPON\" have the privileges to create workstations and enable delegation, we just need to check the MachineAccountQuota:","Great! We can add up to 10 machines in the domain. To summarize, the attack we will be doing the following:","Create a new \"evil\" machine in the domain","Set the UserAccountControl property in the evil machine to allow unconstrained delegation","Add a new DNS record in the DC1 that points to our attacker machine","Add a SPN matching the DNS record to the evil machine machine","Use the printerbug to coerce the DC to authenticate to our evil machine","Use the tool krbrelayx to \"relay\" the Kerberos authentication"]},{"l":"Unconstrained Delegation attack","p":["The easiest way to add a new computer to the domain is by using one of these tools: PowerMad, SharpMad, impacket-addcomputer.","Next, we have to enable unconstrained delegation in the evilcomputer. We can do that remotely using BloodyAD:","We can use the krbrelayx toolkit developed by Dirk-jan to perform the next tasks. Add a DNS record for the evilmachine account we created:","Note that 10.8.0.151 is my attacker machine IP.","In step 4, we need to add an additional SPN via msDS-AdditionalDnsHostName to our evilcomputer:","We can confirm that the DNS entry is working:","Now we start the krbrelay server:","Finally, we trigger the printerbug:","We receive the ticket for the DC1 in our krbrelay server:","We can simply DCSYNC the domain controller using the ticket and login with the NTLM hash of the Administrator:"]}],[{"l":"Changelog","p":["01/08/2022","03/03/2022","06/09/2022","07/08/2022","09/04/2022","10/07/2022","14/08/2022","14/08/2023","16/07/2022","16/08/2023","21/11/2023","23/08/2023","26/07/2022","28/05/2022","30/08/2023","Added CTF Cheat Sheets folder","Added Purple Team Lab - Early Bird - Edge case","Added Purple Team Lab - Mockingjay - BYODLL","Added Purple Team Lab - ThreadlessStompingKann","Added Purple Team Lab folder / Added Deploy Elastic on Raspberry Pi","Added Writeup - Catch","Added Writeup - Late","Added Writeup - Noter & Talkative","Added Writeup - Overgraph","Added Writeup - Retired","Added Writeups - Acute","Added Writeups - AdmirerToo","Added Writeups - Phoenix","Added Writeups - RouterSpace","Change","Date","Updated Cracking & Bloodhound"]}]]