[[{"l":"About","p":["This is just a website where I like to keep some CTF notes and writeups."]}],[{"i":"port-80443---web","l":"Port 80/443 - Web"},{"l":"Banner Grabbing"},{"l":"Check WAF"},{"l":"Default pages with interesting info"},{"l":"Scrape website words","p":["Create a wordlist with the words used in the website."]}],[{"l":"Directory Bruteforce"},{"l":"Interesting Wordlists"},{"l":"Extensions","p":["Apache:.php, .asp, .txt, .xml, .bak IIS:.asp, .aspx, ashx, wsdl, wadl, asmx, .xml, .zip, .txt, .ini, .tmp, .bak, .old, .html, .htm"]},{"l":"Gobuster"},{"l":"Dirsearch"},{"l":"Ffuf"},{"l":"Feroxbuster","p":["Recursively brute-force directories."]}],[{"l":"Git Repository"},{"l":"Clone Repository","p":["Or if that simpsons.git file wasn’t exposed we could use wget to get the job done."]},{"l":"Git Dumper","p":["We can use Git-Dumper in case Git-Clone is showing forbidden."]},{"l":"GitTools","p":["This tool can be used to extract .git from local directory as well."]},{"l":"Git Commands"},{"l":"See files"},{"l":"See Commit Log history"},{"l":"Check difference with the commit hash"}],[{"l":"Virtual Host"},{"l":"Gobuster"},{"l":"FFUF","p":["First figure out the response length of false positives.","Bruteforce:"]}],[{"l":"Wordpress"},{"l":"Basic Enumeration"},{"l":"Super Scan","p":["--plugins-detection aggresive","--plugins-detection mixed","--plugins-detection passive","-ap","-at","-cb","-p","-u","-vp","-vt","All Plugins","All themes","Argument","Config Backup","Description","It will try to enumerate many things and it might take long.","Plugin detection mode.","Plugin detection mode. Bruteforce","Plugins","Users","Vulnerable Plugins","Vulnerable Themes"]},{"l":"Enumerate users"},{"l":"Bruteforce login with a user and a password list"},{"i":"found-lfi-","l":"Found LFI ?","p":["Try to read Wordpress config file:","More paths to test here."]},{"i":"install-malicious-plugin---webshell","l":"Install Malicious Plugin - WebShell"}],[{"l":"Nmap","p":["Basic Nmap usage in CTF."]},{"l":"Host Discovery"},{"l":"Quick All Ports"},{"l":"Rustscan"},{"l":"UDP"}],[{"i":"port-21---ftp","l":"Port 21 - FTP"},{"l":"Banner Grabbing"},{"l":"Anonymous Login"},{"l":"FTP commands"},{"l":"Download all files from FTP"}],[{"i":"port-25---smtp","l":"Port 25 - SMTP"},{"l":"Banner Grabbing"},{"l":"SMTP"},{"l":"SMTPS"},{"l":"Finding MX servers of an organisation"},{"l":"Username Bruteforce Enumeration","p":["Authentication is not always needed."]},{"l":"Using RCPT TO"},{"l":"Using VRFY"},{"l":"Automatic Tools"},{"l":"Sending Email from Linux console"},{"l":"Swaks"},{"l":"Python Script"}],[{"i":"port-53---dns","l":"Port 53 - DNS"},{"l":"Banner Grabbing","p":["DNS does not have a \"banner\" to grab. The closest equivalent is a magic query for version.bind. CHAOS TXT which will work on most BIND nameservers. You can perform this query using dig:"]},{"l":"Nslookup"},{"l":"Zone Transfer"},{"l":"More info"},{"l":"Finding Subdomains"},{"l":"Bruteforce subdomains"},{"l":"Automated Tools","p":["Tools to automate enumeration Zone Transfer and Domain. Bruteforce to find additional hostnames."]},{"l":"DNSRecon"},{"l":"TheHarvester"},{"l":"Sublist3r"},{"l":"Knockpy"}],[{"i":"port-79---finger","l":"Port 79 - Finger"},{"l":"Banner Grabbing"},{"l":"User Enumeration","p":["Metasploit uses more tricks than Nmap."]},{"l":"Command Execution"}],[{"i":"port-88---kerberus","l":"Port 88 - Kerberus"},{"l":"Enumerate users"},{"l":"Nmap"},{"l":"Kerbrute","p":["After the enumeration of user accounts is finished, we can attempt to abuse a feature within Kerberos with an attack method called ASREPRoasting.","ASReproasting occurs when a user account has the privilege \"Does not require Pre-Authentication\" set. This means that the account does not need to provide valid identification before requesting a Kerberos Ticket on the specified user account."]},{"l":"Retrieving Kerberos Tickets","p":["Impacket has a tool called GetNPUsers.py(located in impacket/examples/GetNPUsers.py) that will allow us to query ASReproastable accounts from the Key Distribution Center. The only thing that's necessary to query accounts is a valid set of usernames which we enumerated previously via Kerbrute."]},{"i":"attempt-to-get-a-list-of-user-service-principal-names","l":"Attempt to get a list of user service principal names:"},{"i":"get-the-hash---tgt-asproastable","l":"Get the Hash - TGT (ASPROASTABLE)"}],[{"i":"port-110995---pop3","l":"Port 110/995 - POP3"},{"l":"Banner Grabbing"},{"i":"automated---nmap","l":"Automated - Nmap"},{"l":"POP Syntax"},{"i":"manual-login-bruteforce-user-enumeration","l":"Manual Login Bruteforce (User enumeration)"},{"i":"automated-bruteforce---hydra","l":"Automated Bruteforce - Hydra"}],[{"i":"port-111---rpc","l":"Port 111 - RPC"},{"l":"Basic enum"},{"l":"NFS shares","p":["If getting permission denied to read files inside the mounted directory, create a user in Kali with the same UID."]},{"l":"Exploit User UID permissions"},{"l":"Enumerate users"},{"l":"Connect with a null-session","p":["Only works for older windows servers."]}],[{"i":"port-139445---smb","l":"Port 139/445 - SMB"},{"l":"Methodology"},{"l":"Enumerate All"},{"l":"Check for vulnerabilities"},{"l":"List Open Shares"},{"l":"List Files in share"},{"l":"Mount a share to browse locally"},{"l":"Connect to SMB share"},{"l":"Get password policy"},{"l":"Bruteforce SMB Login"},{"l":"Download all files from share"},{"l":"WinRM"}],[{"i":"port-143---imap","l":"Port 143 - IMAP"},{"l":"Banner Grabbing","p":["If the server supports NTLM auth (Windows) you can obtain sensitive info (versions):"]},{"l":"Syntax"}],[{"i":"port-161-udp---snmp","l":"Port 161 UDP - SNMP"},{"l":"Basic Enumeration"},{"l":"Capture SNMP traffic sent to server"},{"l":"Install SNMP MIBS to make the output readable"},{"l":"Crack SNMP Passwords"},{"l":"Bruteforce Community String"}],[{"i":"port-389---ldap","l":"Port 389 - LDAP"},{"l":"LDAPSearch","p":["LdapSearch Naming Context Dump:"]},{"l":"LdapSearch Big Dump","p":["Need Naming Context to do big dump:"]},{"l":"Query users in LDAP"},{"i":"extract-hash--crack--connect","l":"Extract hash >> Crack >> Connect"},{"l":"LDAP Domain Dump"}],[{"i":"port-1433---mssql","l":"Port 1433 - MSSQL","p":["Microsoft SQL Server is a relational database management system developed by Microsoft. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications which may run either on the same computer or on another computer across a network (including the Internet)."]},{"l":"Execute Commands"},{"l":"Metasploit"},{"l":"With Credentials"},{"l":"Impacket","p":["You can login into the service using impacket mssqlclient.py."]},{"l":"SQSH"}],[{"i":"port-3306---mysql","l":"Port 3306 - MySQL"},{"l":"Bruteforce"},{"l":"Connect"},{"i":"syntax--commands","l":"Syntax & Commands"}],[{"i":"port-3389---rdp","l":"Port 3389 - RDP"},{"l":"Access Remote Desktop","p":["Connect with known credentials/hash."]},{"l":"WinRM"}],[{"i":"port-59855986---winrm","l":"Port 5985/5986 - WinRM"},{"l":"Enable WinRM","p":["We need to enable it and add any \"victims\" as trusted hosts. From an elevated PowerShell prompt, run the following two commands:"]},{"l":"Connect"}],[{"i":"port-6379---redis","l":"Port 6379 - Redis"},{"l":"Banner Grabbing","p":["The first command you could try is info. It may return output with information of the Redis instance or something like the following is returned:","In this last case, this means that you need valid credentials to access the Redis instance.","If the Redis instance is accepting anonymous connections or you found some valid credentials, you can start enumerating the service with the following commands:"]},{"l":"Dumping Database"},{"l":"Redis RCE","p":["You must know the path of the Web site folder:"]}],[{"i":"subdomain--virtual-host","l":"Subdomain / Virtual Host"},{"i":"osint---ssltls-certificates","l":"OSINT - SSL/TLS Certificates","p":["When an SSL/TLS (Secure Sockets Layer/Transport Layer Security) certificate is created for a domain by a CA (Certificate Authority), CA's take part in what's called \"Certificate Transparency (CT) logs\". These are publicly accessible logs of every SSL/TLS certificate created for a domain name. The purpose of Certificate Transparency logs is to stop malicious and accidentally made certificates from being used.","We can use this service to our advantage to discover subdomains belonging to a domain, sites like https://crt.sh and https://transparencyreport.google.com/https/certificates offer a searchable database of certificates that shows current and historical results.","https://crt.sh","https://transparencyreport.google.com/https/certificates"]},{"i":"osint---search-engines","l":"OSINT - Search Engines"},{"l":"Google","p":["Search for subdomains and exclude www."]},{"i":"osint---tools","l":"OSINT - Tools"},{"l":"Sublist3r"},{"l":"TheHarvester"},{"l":"DNS Bruteforce"},{"l":"Dnsrecon"},{"l":"Knockpy"},{"l":"Virtual Hosts"}],[{"l":"MSFVenom"},{"l":"List Payloads"},{"l":"Windows Payloads"},{"l":"Metasploit Meterpreter Listener"},{"l":"x86"},{"l":"x64"},{"l":"Encode and remove bad chars"},{"l":"Linux Payloads","p":["Web Payloads"]}],[{"l":"Web Payloads"},{"l":"PHP"},{"i":"asp--aspx","l":"ASP / ASPX"},{"l":"JSP"},{"l":"WAR"},{"l":"Ruby"}],[{"l":"SQL Injection"},{"i":"basic---login-bypass","l":"Basic - Login Bypass"},{"l":"User Registration","p":["Usually found in the username field."]},{"l":"Manual SQL Injections"},{"i":"loadread-file","l":"Load/Read File","p":["SQL injection login post:","Example Ippsec Writer."]},{"l":"MongoDB"},{"l":"Type confusion","p":["JSON format","Example: NodeBlog","Bruteforce the password - Python Script"]}],[{"i":"validation---htb-machine","l":"Validation - HTB Machine","p":["http://10.10.11.116/","We can enter any username and select the country to join the competition. Looking in Burp we can play with the parameters.","The web app logic is as follows:","User enter username and select country","A session cookie is generated (MD5) and user is redirected to /account.php","In /account.php the web app takes the user country input to display a list of players"]},{"l":"Finding the SQL Injection","p":["Adding an extra ' in the country value generates an error when /account.php is loaded."]},{"l":"Exploiting the SQL Injection","p":["Dumping the /etc/passwd file:","Uploading a PHP simple RCE (shell.php):"]}],[{"l":"Bruteforce"},{"l":"Hydra"},{"l":"HTTP"},{"l":"FTP"}],[{"l":"File Upload"},{"l":"RCE through image metadata","p":["When upload remember the Content-type: application/x-php."]},{"l":"GIF","p":["Create a file with the GIF magic bytes."]},{"l":"Magic Shell","p":["Merge php code with valid upload file header.","File shell.php:","Merge the magic bytes of a image to shell.php to bypass validation:","Usually the file needs to end in .php to have code execution. However, sometimes the .htaccess is misconfigured and allows .php.jpg to execute code as well.","Why magical-shell.php.jpg can execute code?"]},{"i":"webconfig","l":"Web.config","p":["For old IIS web servers (7.5). You can put ASPX code on the bottom of a web.config file:","See Ippsec Bounty video."]}],[{"i":"jwt-token---key-confusion","l":"JWT Token - Key Confusion","p":["Example Token:","Decoded:"]},{"l":"Vulnerable Code","p":["We see there are 4 functions inside this module and of them is getUser function as expected. getUser function requires username to be passed on and it will query the database to get the data about the username.","If we see the detail, we know that getUser is vulnerable to SQL injection because it takes the username and directly appends to the existing query.","So, this concludes our plan, they want us to modify the JWT and somehow bypass the JWT validation check and use SQL injection to get the information that we need."]},{"i":"exploit-jwt--sql-injection","l":"Exploit JWT + SQL Injection"},{"l":"Tools used","p":["JWT_Forge","Public Key extracted from the original JWT:"]},{"l":"Inject SQL into the username","p":["By using this payload, the current username will be replaced by the first table name. Because the jwt_tool we can not use the “%” sign (somehow it throws an error), therefore we need to improvise a little bit using limit 1 offset x. It also helps to get more information if the table we want is not the first table.","By using this payload, the current username will be replaced by the flag.","Finally, we will query the table and get the flag.","Find the column count","Find the selected column to display","Get the columns","Get the flag","Get the tables","Modify our JWT Token and inject a SQL injection in the username:","Payload:","So I simply put my injection code inside the payload value under the username payload claim/payload key. Below is my injection steps:","This type of information gathering is result-based which means, the behavior can be examined through the output. If the second column is used then it will prints “2” (just because we put number 2 in the second column)","This type of information gathering is true or false based. If the column count is the same, then the query will execute as a normal query, otherwise, it will throw the error message (“SQLite3 error on line ……”)","We need to identify how many columns does the first query select (since it uses * which means all columns).","We need to identify the columns inside the table we want. Every database engine has its own way, this is specific for SQLite3.","We need to identify the tables where we will query the information from. Every database engine has its own way, this is specific for SQLite3.","We need to identify which columns will be fetched and be displayed by the application. For example, the columns might be id, username, and status. When the application prints the username, then we know that the selected column is the second one. This is important for our next move."]}],[{"l":"LFI","p":["Goals:","Try to read internal/local files","Try to read webserver files"]},{"l":"Log Poisoning","p":["If we can access the webserver logs it is possible to get RCE."]},{"l":"Proc Environ Injection","p":["If we get a response like HTTP_USER_AGENT=curl/7.57.0/p /body, we can poison the User Agent header. In Burp, change the request like this:"]},{"l":"PHP Filter to read local files"},{"l":"Windows System Files"},{"l":"Linux Files","p":["More here: https://github.com/D35m0nd142/LFISuite/blob/master/pathtotest.txt"]},{"l":"Apache"},{"l":"LFI to RCE to Shell Trick","p":["This is a combination of LFI and SSRF to RCE."]}],[{"l":"Reverse Shells"},{"l":"Upgrade TTY"},{"l":"Using SOCAT"},{"l":"Using Script"},{"l":"PHP Simple RCE","p":["Trigger: http://10.10.10.x/uploads/rce.php?cmd=whoami"]},{"l":"Other PHP RCE examples"}],[{"l":"Shellshock"},{"l":"Common directories","p":["Search for files with extension: .cgi, .sh"]},{"l":"RCE","p":["Send this on the User-Agent header:","Using Curl:","Using Burp:"]}],[{"l":"SQLmap"},{"l":"Usage"},{"l":"Syntax","p":["--batch","--dbs","--delay=1","--dump","--force-ssl","--os-pwn","--os-shell","--tables","-C","-D","-T","Adds delay in the requests","Argument","Description","Discover database","Dont prompt - Run as default","Dump database","Find tables","If using 443 https","Interactive shell","OOB shell, meterpreter","Select Column","Select database","Select table"]},{"l":"Examples"}],[{"i":"subnet-pivoting--port-forwarding","l":"Subnet Pivoting / Port forwarding"},{"l":"SSHuttle","p":["To access a subnet from a compromised host."]},{"l":"SSH port forward","p":["To access a port listening on the victim localhost."]}],[{"l":"Top Fuzzing Parameters","p":["Top fuzzing parameters."]},{"l":"XSS"},{"l":"SSRF"},{"l":"LFI"},{"l":"SQL Injection"},{"l":"RCE"},{"l":"Open Redirect"}],[{"l":"Web Shells"},{"l":"PHP"},{"l":"Interactive PHP web shell","p":["P0wnyShell"]},{"l":"Simple PHP RCE","p":["Using REQUEST we can use a POST. (POST use less bad characters!)","Bypass file validation with GIF header:"]},{"l":"ASPX"},{"l":"Collections","p":["A collection of webshells to use/upload to webservers: https://github.com/tennc/webshell https://github.com/xl7dev/WebShell"]}],[{"l":"Linux Privesc"},{"i":"os-kernel--hostname","l":"OS, Kernel & Hostname"},{"l":"Users"},{"l":"Network"},{"l":"Try scanning other ports using netcat"},{"l":"SSH tunnel","p":["Example to create a SSH tunnel and access port 80 in 192.168.122.4","Now we can access 127.0.0.1:80."]},{"l":"Processes Running"},{"l":"Installed Packages"},{"l":"Find SUID"},{"l":"World writable scripts invoked as root"},{"l":"World executable folder"},{"l":"World writable and executable folders"},{"i":"find-world-writable-files-in-etc","l":"Find world-writable files in /etc"},{"l":"World-writable directories"}],[{"l":"Big Checklist"},{"l":"Spawn Interactive Shell and set env"},{"l":"Restricted bash"},{"l":"Automated scripts"},{"l":"Check environment"},{"l":"Is there a printer"},{"l":"Check any restricitions on any folders"},{"l":"Check any unmounted drives"},{"l":"Applications and services"},{"i":"jobs--crons","l":"Jobs / CRONS"},{"l":"Network"},{"l":"Cached IPs"},{"l":"USER and Sensitive info"},{"l":"Check for Sensitive info"},{"l":"FileSystem"},{"l":"Check for NFS no root squash on exports","p":["Can be escalated by mounting on local system and writing an suid binary as root, root privs are not squashed"]},{"i":"which-configuration-files-can-be-written-in-etc-able-to-reconfigure-a-service","l":"Which configuration files can be written in /etc/? Able to reconfigure a service?"},{"l":"VAR contents"},{"l":"Check Application logs for sensitive data"},{"l":"Find SUID Files"},{"l":"Writable file and nobody files"},{"l":"Writable by current user"},{"i":"any-script-files-that-we-can-modify","l":"Any script files that we can modify?"},{"i":"any-service-running-by-root","l":"Any service running by root?"},{"l":"Find password"},{"l":"Interesting files"},{"l":"Sqlite DB files"},{"l":"Find all hidden files"},{"l":"Scripts in PATH"},{"l":"Backup files"},{"l":"SUID"},{"i":"is-suid-bit-set-on-these-applications","l":"Is suid bit set on these applications?"},{"l":"Linux capability"},{"l":"Mysql run by root"},{"l":"Docker group"}],[{"l":"Cronjobs","p":["Cron table files (crontabs) store the configuration for cron jobs."]},{"l":"Location","p":["Example:"]},{"l":"File Permission","p":["Cronjobs that run as root and we can write to that directory?","Add a bash reverse shell in the file:"]},{"l":"PATH Environment Variable","p":["The crontab PATH environment variable is by default set to /usr/bin:/bin","If a program/script does not use absolute path create a script with the same name as the cronjob in the first directory the path look for the files.","Example: PATH=/home/user/:/usr/local/sbin:/bin"]},{"l":"Exploit","p":["Make sure the script is executable:","Wait for the cronjob, get a root shell:"]},{"l":"Wildcards","p":["Abusing TAR arguments.","Cronjob file:"]},{"i":"exploit-1","l":"Exploit","p":["Generate a reverse shell using msvenom:","Copy the file to the /home/user directory and make it executable:","Create two files in the /home/user directory:","Start a netcat listener and wait for the cronjob:"]}],[{"l":"Dirty Pipe"},{"l":"Affected versions","p":["Linux kernel versions newer than 5.8 are affected. So far the vulnerability has been patched in the following Linux kernel versions:","5.16.11","5.15.25","5.10.102"]},{"l":"Exploit Repositories"},{"l":"Exploit","p":["Compile using gcc exploit.c -o exploit and run ./exploit. It will overwrite the root password to aaron and sapwn a shell."]},{"i":"su-must-be-run-from-a-terminal","l":"su: must be run from a terminal","p":["If you get this error message: 1 - Login as root with the password aaron. 2 - Then, restore /etc/passwd by running mv /tmp/passwd.bak /etc/passwd"]}],[{"l":"Kernel Exploit"},{"l":"Find the Kernel version"},{"l":"Search for exploits"},{"i":"tool---linux-exploit-suggester","l":"Tool - Linux Exploit Suggester"},{"l":"OS System running"},{"l":"Kernel Version"},{"l":"GCC Compile 32Bit Exploit on 64Bit Kali"}],[{"i":"mysql-4x5x","l":"MySQL 4.x/5.x"},{"l":"Enumerate programs running","p":["Example MySQL 4.x/5.0 User-Defined Function"]},{"l":"Compile and Convert the exploit to 64-bit"},{"l":"Create a shared object from the compiled exploit"},{"l":"Connect to mySQL"},{"l":"Steps to load the shared object into MySQL"},{"l":"Execute rootbash shell"}],[{"l":"NFS","p":["Check the contents of /etc/exports for shares with the no_root_squash option:","No_root_squash means that we can write as root user to that location.","Confirm that the NFS share is available for remote mounting:"]},{"l":"Exploit","p":["Create a mount point on your local machine and mount the /tmp NFS share:","Using the root user on your local machine, generate a payload and save it to the mounted share:","Make sure the file has the SUID bit set, and is executable by everyone:","On the target machine, execute the file to get a root shell:"]}],[{"i":"port-forwarding---ssh","l":"Port Forwarding - SSH","p":["To forward a port open internally in the victim machine to our local machine."]},{"l":"Usage"},{"l":"Find the open ports"},{"l":"Example MySQL"},{"l":"In the local machine access the port"}],[{"l":"Pwnkit","p":["Polkit (formerly PolicyKit) is a component for controlling system-wide privileges in Unix-like operating systems. It provides an organized way for non-privileged processes to communicate with privileged processes. It is also possible to use polkit to execute commands with elevated privileges using the command pkexec followed by the command intended to be executed (with root permission)."]},{"l":"Linux distributions","p":["Distribution","Vulnerable?","RHEL 7","No","RHEL 8","Yes","Fedora 20 (or earlier)","Fedora 21 (or later)","Debian 10 (“buster”)","Debian testing (“bullseye”)","Ubuntu 18.04","Ubuntu 20.04"]},{"l":"Exploit"},{"l":"Compiling","p":["https://github.com/ly4k/PwnKit","https://github.com/arthepsy/CVE-2021-4034"]},{"l":"In Python","p":["https://github.com/ravindubw/CVE-2021-4034","https://github.com/joeammond/CVE-2021-4034"]},{"l":"Bash","p":["https://github.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation"]}],[{"l":"SSH"},{"l":"Check if we can login as root"},{"l":"Have access to ssh private key","p":["Copy the key to our local computer."]},{"i":"generate-a-publicprivate-ssh-key-pair","l":"Generate a public&private ssh key pair","p":["Add our public ssh key to authorized_keys file."]}],[{"l":"Sudo"},{"l":"Vulnerable Versions","p":["Get sudo version"]},{"i":"sudo--1828","l":"Sudo < 1.8.28"},{"i":"cve-2021-3156-sudo-baron-samedit","l":"CVE-2021-3156 (Sudo Baron Samedit)","p":["Affects all legacy versions from 1.8.2 to 1.8.31p2 and all stable versions from 1.9.0 to 1.9.5p1 in their default configuration."]},{"i":"cve-2021-3156---sudo-1831-no-bruteforce","l":"CVE-2021-3156 - Sudo 1.8.31 (no bruteforce)"},{"l":"Apache as sudo","p":["If we can run Apache as sudo, use apache2 to read /etc/shadow file:"]},{"l":"Environment Variable"},{"l":"LD_PRELOAD","p":["Create the exploit:","Compile:","Run any allowed program using sudo and the shared object created:"]},{"l":"LD_LIBRARY_PATH","p":["Select one shared object to replace (one that sudo can run):","Create the exploit:","Compile:","Run any allowed program using sudo and the shared object created:"]}],[{"l":"SUID"},{"l":"Find SUID files","p":["Search on GTFOBins for exploitation: https://gtfobins.github.io/","Use searchsploit: searchsploit suidprogram 2.3"]},{"l":"Shared Object","p":["Use strace to find the shared objects not found.","In the result above, the program is trying to load a shared object from the user directory.","1 - Create the directory /home/user/.config 2 - cd into .config directory 3 - create the shared object libcalc.so","Compile:","Execute the SUID file to gain root shell:"]},{"l":"PATH Environment Variable","p":["We create a reverse shell embedded into a program with the same name as one of the programs used by the SUID programs.","For example:","/usr/bin/mysuidprogram is a program that start an apache server using the string service apache start. We could then create a file named service located in our user home directory and append the /home/user directory to the PATH variable.","The computer will call /home/user/service before /usr/bin and spawn a root reverse shell."]},{"i":"finding-vulnerable-programs-in-suid","l":"Finding vulnerable programs (in SUID)","p":["Create the exploit:","Compile:","Prepend the current directory to the PATH directory:"]},{"l":"Old Bash","p":["Versions < 4.2-048 are vulnerable to path attack.","Versions < 4.4 inherit the PS4 env variable."]}],[{"l":"Weak Files Permissions"},{"i":"writable-etcshadow","l":"Writable /etc/shadow"},{"i":"writable-etcpasswd","l":"Writable /etc/passwd"},{"i":"a-generate-a-new-password","l":"a) Generate a new password"},{"i":"b-generate-a-new-root-user","l":"b) Generate a new root user"}],[{"l":"Big Checklist"},{"l":"System Enum"},{"l":"Updates"},{"l":"Applications"},{"l":"Services"},{"l":"Disk Volume"},{"i":"drivers---in-powershell","l":"Drivers - in powershell"},{"l":"User enum"},{"i":"network--firewall--av--defender","l":"Network / Firewall / AV / Defender"},{"l":"Checklist automated tools"},{"l":"Check folder permissions"},{"l":"Running processes to started services"},{"l":"Windows services that are started"},{"l":"Look for 3rd party drivers"},{"i":"check-if-wmic-is-allowed-on-low-priv-shell-mostly-allowed-on-win7-win8","l":"Check if WMIC is allowed on low priv shell. Mostly allowed on Win7 /win8"},{"l":"Check directory permissions"},{"l":"Scheduled Tasks"},{"l":"Startups and autoruns"},{"l":"Service Permissions"},{"l":"Check if service config can be modified"},{"l":"Unquoted Service Path"},{"l":"AlwaysInstallElevated","p":["IF 64 bits use: %SystemRoot%\\Sysnative\\reg.exe"]},{"l":"Service only available from inside"},{"l":"Password in files"},{"l":"Unattended config"},{"l":"Registry"},{"l":"VNC"},{"l":"Windows autologin"},{"l":"SNMP Paramters"},{"l":"Putty"},{"l":"Search for password in registry"},{"l":"REGSVC ACL"},{"l":"Unquoted Service Path Exploitation"},{"i":"case-1-seshutdownprivilege-is-listed-when-checked-whoami-priv","l":"Case 1, SeShutdownPrivilege is listed when checked whoami /priv"},{"i":"case-2-seshutdownprivilege--disabled-we-have-service_stopservice_start-privilege-on-a-service","l":"Case 2, SeShutdownPrivilege = Disabled, we have (service_stop,service_start) privilege on a service"},{"l":"Weak service permissions Exploitation"},{"l":"Weak Registry Permissions Exploitation"},{"l":"Weak Service Executable File Permissions Exploitation"},{"l":"AlwaysInstallElevated privilege Escalation"},{"l":"DLL hijacking"},{"l":"Stored credentials"},{"l":"Files that may contain passwords"},{"l":"Find all weak folder permissions per drive"},{"l":"Find all weak file permissions per drive"}],[{"l":"Potatoes"},{"l":"Affected Windows Versions"},{"l":"Juicy Potato","p":["Requirements: SeImpersonatePrivilege or/and SeAssignPrimaryTokenPrivilege enabled."]},{"l":"Find a CLSID","p":["https://github.com/ohpe/juicy-potato/tree/master/CLSID/Windows_10_Pro","http://ohpe.it/juicy-potato/CLSID/Windows_10_Pro/"]},{"i":"exploit---get-a-netcat-reverse-shell","l":"Exploit - Get a netcat reverse shell"},{"i":"exploit---downloadrun-a-malicious-script-as-administrator","l":"Exploit - Download&Run a malicious script as Administrator"},{"l":"Print Spoofer","p":["Requirements: SeImpersonatePrivilege enabled.","Tested on: Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2019."]},{"i":"exploit---run-powershell-as-administrator","l":"Exploit - Run Powershell as Administrator"}],[{"l":"Quick Wins"},{"l":"Run Powershell"},{"l":"PowerShell History"},{"l":"User Enumeration"},{"l":"OS Enumeration"},{"l":"Hot Fixes"},{"l":"Open Ports"},{"l":"Check Firewall"},{"l":"Find Passwords"},{"l":"In the registry"},{"l":"Autologin"},{"l":"RunAS"},{"l":"AlwaysElevated"}],[{"l":"Service Exploit","p":["DOWNLOAD ACCESSCHK.EXE http://live.sysinternals.com/accesschk.exe"]},{"l":"Check if User can modify a service","p":["If the group Authenticated users has SERVICE_ALL_ACCESS in a service, then it can modify the binary that is being executed by the service.","To modify it and execute netcat you can do:"]},{"l":"Insecure Service Permissions","p":["If you can change config, the easies way to privesc is change BINARY PATH to the location of a reverse shell EXE."]},{"l":"Weak Registry Permissions"}],[{"l":"Unquoted Service Path","p":["Example: C:\\Program Files\\Application ABC\\Common Files\\app.exe","When the service start Windows will check for:","C:\\Program.exe","C:\\Program Files\\Application.exe","C:\\Program Files\\Application ABC\\Common.exe","Before using the full path to C:\\Program Files\\Application ABC\\Common Files\\app.exe","If we can create any o this files with a reverse shell it’s a win!"]}],[{"l":"Windows Tricks"},{"l":"PowerShell encoded base64","p":["Create a base64 payload to avoid bad characters."]},{"i":"run-command-as-user-with-creds","l":"Run command as User (with creds)"},{"l":"List running process with args"},{"l":"Scan for hosts and open ports in subnet"},{"l":"PowerShell"},{"l":"Search for files"},{"l":"Windows Security"},{"l":"Disable Firewall"},{"l":"Disable AMSI"},{"l":"Disable Defender"},{"l":"Execution Policy"},{"l":"Add a RDP user"}],[{"l":"ASPREPRoast AD"}],[{"l":"BloodHound"},{"l":"Install"},{"l":"Usage"}],[{"i":"bloodhoundpy","l":"BloodHound.py"},{"l":"Get the domain and host name"},{"l":"Enumerate usernames"},{"l":"Create usernames","p":["Create a file with the names of staff → names.txt:","Python script to create usernames based on names.txt:","Just run: python script.py names.txt","It will create a list of usernames combining the Name and Lastname."]},{"l":"Check for valid usernames with kerbrute","p":["You need to be time sync with the target:","Bruteforce usernames using kerbrute:"]},{"l":"Password spray with kerbrute"},{"l":"More enumeration using credentials"},{"l":"Bloodhound Python","p":["Install:","Usage:","Start Neo4j:"]},{"l":"Bloodhound","p":["https://github.com/BloodHoundAD/BloodHound","Download the latest release","Go to Upload Data: Import the .json files create by Bloodhound.py.","FIND KERBEROASTABLE ACCOUNTS","BloodHound: ANALYSIS → QUERIES","Find all Domains Admins","Mark users as high value if not yet","List all Kerberoastable Accounts","Found web-svc account.","Use credentials and impacket to extract the hash of Kerberoastable users:","Crack the hash:","If password is cracked, mark the web-svc user as OWNED and run the queries again."]}],[{"l":"Dump Hashes"},{"l":"Using SMB"},{"l":"Powershell"}],[{"l":"Port Forwarding"},{"l":"Chisel","p":["Example in how to expose port 4444 found in Windows machine to local 9001:"]}],[{"l":"Post Exploitation"},{"l":"Mimikatz","p":["Post exploitation commands must be executed from SYSTEM level privileges."]},{"i":"ad---powerview","l":"AD - PowerView"}],[{"l":"Transfer Files"},{"l":"SMB Share"},{"l":"Powershell"},{"l":"Base64 encoded file"}],[{"l":"Find The Easy Pass"},{"l":"Challenge description","p":["Category","Level","Description","Reversing","Easy","Find the password (say PASS) and enter the flag in the form HTB"]},{"l":"Downloading files","p":["For this challenge it is given only one executable file:","EasyPass.exe"]},{"i":"installing-wine--ollydbg","l":"Installing wine & ollydbg","p":["Since this is a Windows executable, lets use wine to run this application. In case you don't have wine installed, this is what you should do:","Now we can simply run wine EasyPass.exe and the application will load:","We also need a debugger that works for Windows executables, there are many out there but I will be using Ollydbg. Remember that Ollydbg requires wine to run. Installing Ollydbg:"]},{"l":"Ollydbg","p":["First thing lets have a look at the string that are longer than 10 characters, maybe we can quick find some passwords or something like that:","No luck.","To start Ollydbg simply run:","We can go to File -> Open -> (select the EasyPass.exe file)"]},{"l":"Strings","p":["Now that we have the file loaded lets search for some strings.","Right click","Go to \"Search for\"","Click on \"All referenced text strings\"","We see:","Good job. Congratulations","Wrong Password!","So it seems that these are the message sent in case of right or wrong password entered. Double-click in the \"Good job\" to see where it is implemented."]},{"l":"Analysis","p":["CALL EasyPass.404628 calls a function sub_404628. We currently don't know what this functions does, but the outcome of it decides whether we get a \"Congratulations! Good Job\" message or the \"Wrong Password\" one (jnz = Jump if not zero to the \"Wrong Password\" part, else continue to \"Good Job\"). We can select the CALL EasyPass.404628 and press enter or right-click and \"Follow\" to see more of the function:","It's basically just comparing two values (EAX and EDX). Depending on their equality, we get a zero flag or not:","All we need to do now is find out what is the JNZ comparing to and we could potentially find the password. Lets set a breakpoint in the CALL just before the JNZ.","Select the line and press F2.","Now lets run the application clicking in the Play button. We can enter anything when prompted for a password:","As soon as we press the \"Check Password\" button we hit the breakpoint. If we look at the registers we can spot the two ASCII that are probably being compared to define if the password entered is good: The program is comparing EAX (user input) to EDX (password in memory). We can confirm that running the program again and entering fortran! in the password field and we get the \"Good Job\" message."]}],[{"l":"WAFfle-y Order","p":["Category: Web Level: Medium"]},{"l":"Code Analysis","p":["Checking out the index.php we find the PHPSESSID cookie is serialized:","In OrderController.php we find the deserialization:","Before the deserialization the cookie is sanitized by safe_object method. It checks for unsafe functions starting with __:","Having found the deserialization vulnerability, the next step is to find classes that can be exploited by the deserialization vulnerability.","There is a XmlParserModel class and the __wakeup method, which is called when the object is deserialized:","In sum, exist a __wakeup method in XmlParserModel and object variable $data with simplexml_load_string is used as XML parsing. When deserializing, the vulnerability can give $data variables arbitrary values that can be created by external entities XXE.","However, when $data is including external entities, it will be replaced by the regular expression /!(?:DOCTYPE|ENTITY)(?:\\s|%|#[0-9]+;|#x[0-9a-fA-F]+;)+[^\\s]+\\s+(?:SYSTEM|PUBLIC)\\s+[\\'\\]/im matches, resulting in the call die and return Unsafe XML. For this, you can UTF-8 encoded XML document converted to UTF-16 coding"]},{"l":"METHODOLGY","p":["When making the call, the server checks if the cookie is “safe” with safe_object(). The method finds all matches of serialized objects and gets their respective class methods. If any of the class method contains __ at the beginning (for magic methods exploits), the program dies.","Decoded cookie, the ErrorException contains magic method __ construct: O:14:\"ErrorException\":1:{s:8:\"username\";s:10:\"guest_614c\";}","To bypass this restriction, I studied this writeup: https://github.com/MegadodoPublications/exploits/blob/master/composr.md#the-moderately-cool-way-that-works","Objects that implement the Serializable interface contain two methods serialize and unserialize. When serializing such an object a string of the following format will be returned:","Creating a serialized string in this format for an object of a class that doesn’t implement Serializable will work but the deserialized object will not have any class members set. It is thus not very useful for our purposes but it does lead the way to a final working exploit.","Notice the : before O. This prevents the regex from matching. Part of the payload is going to look like this. $pay is our serialized payload object."]},{"l":"XML WAF bypass","p":["We will serialize XmlParserModel class. It has __wakeup magic method, and calls simplexml_load_string() which we will exploit. With this method, we can do XXE, but have to first bypass the regex check. The LIBXML_NOENT option allows us to use XML entities.","To bypass the regex, I use UTF-16 encoding on the XML payload. The simplexml_load_string() does whats its told to do, and the regex just don’t know what’s going on and lets the payload through."]},{"l":"DTD OOB exfiltration","p":["Free from restraints, we can finally do the XXE with OOB DTD (inspiration). The challenge is internet-enabled. I’m going to fetch the DTD from ngrok which I tunnel to my machine where I host the DTD file. The DTD reads the flag file and make a call to my internet webhook, where a GET parameter contains the flag."]},{"l":"Exploit","p":["Lets create 3 files. In exploit.py we generate php serialized payload and encode using base64. URL encoding is done inplicitly in requests. Insert payload into cookie and make the API call.","In php_pay.php we create and xml paylod that will be interpreted by simplexml_load_string(). We tell it to fetch our malicious DTD and execute it. Then we convert the xml into UTF-16BE, serialize it and paste it into our predefined serialized structure.","In malicious.dtd we tell the system to get contents of /flag and encode it using base64. We have to use base64 encoding because the file contains a newline at the end, and the xml entity doesn’t like that. We then instruct the system to make and http call to our webhook which contains the flag as a GET parameter."]},{"l":"FLAG","p":["Now we just need to run exploit.py and get the flag in the webhook."]}],[{"l":"Machines","p":["Acute","AdmirerToo","Catch","Coming soon as they retire.","Easy","Hard","Level","Linux","Machine","Medium","OS","Overflow","Phoenix","Retired","Routerspace","Timelapse","Windows"]}],[{"l":"Overflow","p":["IP: 10.10.11.119"]},{"i":"nmap---port-scan","l":"Nmap - Port Scan"},{"l":"All ports"},{"i":"service--safe-scripts","l":"Service & Safe Scripts"},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Before we start digging into the machine I added the IP address to my /etc/hosts:","Going to http://overflow.htb/ we see a website with only \"Sign In\" and \"Sign Up\" functionalities:","I first tried some default credentials but nothing works, so I registered a new user caue:password. The application automatically log me in as I sign up. Notice the redirect to /home/index.php, and other options are now available:","Profile: Static profile page","Blog: Static blog page","Pricing: Redirects to home page","Log out: Log out and redirect to home page","Nothing much we can do. I decided to run gobuster and also look at the cookies."]},{"l":"Gobuster","p":["Gobuster the root directory:","Gobuster the /home directory:","Accessing /home/logs.php we get \"Unauthorized!!\" message:","Probably we need to be a user with high privileges."]},{"l":"Cookies","p":["Lets take a look at the cookies:","Tried to decode the cookies but didn't get any information back, it looks like there is some cipher behind it. However, modifying the cookie adding or removing characters, we get redirected and an error message:","This could be indicative of CBC encryption, which can be reversed using a Padding Oracle Attack. We’ll use padbuster to attempt the padding oracle attack.","sudo apt install padbuster","Padbuster is a tool able to decrypt ciphertext, encrypt paintext, and perform analysis. In another words, it can decrypt the cookie and also generate a new cookie with the text provided. So first we need to know what is that cookie so we can generate an admin cookie.","The original cookie from my screenshot seemed to have expired. I think there is some kind of database cleanup schedule running. So I registered a new account and extracted the cookie. Now we put this into our padbuster command:","We have successfully decrypted the cookie! The cipher value is user=caue, which was the username registered. Now that we know the cipher value syntax, we’ll use padbuster to generate a new cipher for admin:","Great! We have the admin cookie! We can open the browser developer tools and change the current cookie to this one. As soon as we refresh the page we get an \"Admin Panel\" menu option:","Clicking in the \"Admin Panel\" takes us to http://overflow.htb/admin_cms_panel/admin/login.php. It is a CMS Made Simple portal. There are a lot of exploits for this application but they most require authentication and we don't have credentials yet."]},{"l":"Logs","p":["Decided to go back to /home and take a look at the \"Logs\". Since we were not authorized before, lets see what happend with admin cookie:","Clicking in the \"Logs\" menu bar opens a popup dialog displaying the last login times of the user. If we look in the browser developer tools, we can see an interesting JavaScript being loaded ../config/admin_last_login.js. Lets take a look at it.","Basically, it is fetching data from http://overflow.htb/home/logs.php?name=admin. Going to that URL we can confirm that:![[image9.png]]","Every time a web application have a parameter that the user can control, we should test for weak sanitization. I will make this request again, intercept with Burp, save it to a file and use sqlmap to check for injections."]},{"l":"SQLmap","p":["Request saved from Burp (important to keep the cookie for authentication!):","Testing for SQL injections:","Yes! It is vulnerable to SQL injection. We see that the database is MySQL so we can add -dbms=mysql to our next queries. Lets enumerate this databases.","Databases:","DB->Overflow:","I could not crack this password! Lets move on.","DB->cmsmsdb:","DB->cmsmsdb Table->cms_users:","Ok, this looks promising... Doing a little bit of research, this hashes are encrypted with salt and it can be found in the cms_siteprefs table under the sitemask column:"]},{"l":"Cracking users hashes","p":["In order to use hashcat we need to add the hashes into a file following th hash:salt format:","Lets run hashcat against the hashes:","Hashcat only cracked the editor password alpha!@#$%bravo."]},{"l":"CMS Made Simple","p":["Back to the CMS page http://overflow.htb/admin_cms_panel/admin/login.php we can use this credentials to login! We can see at the bottom of the page the version CMS Made Simple 2.2.8 Flin Flon. I kept browsing and enumerating the pages and saw an hint to another page:","Adding the new hostname to our hosts file we can access it. There is a login page and using the same credentials from editor we successfully login to the web app."]},{"l":"Devbuild","p":["Poking around on the website, we find an upload function when we click on our account. I tried uploading a php webshell, but it failed due to unsupported filetype.","Another interesting thing was the server response when we upload a file:","It is using exiftool! Doing a little more research on exiftool- specially version 11.92, I found a CVE-2021–22204. Metasploit has a module for the exploit, which makes this super convenient.","Lets start a netcat listener on port 4444 and upload the generated jpeg file."]},{"l":"Shell as www-data","p":["Looking through the web folders we find some credentials.~/devbuild-job/config/db.php","And","~/html/config/db.php","We need to escalate to a user, preferable with shell. Lets look at the /etc/passwd:","We have a user called developer, and we also have a database password for developer. Lets use SSH with these credentials."]},{"l":"SSH as Developer","p":["We still don't have user.txt flag! It is in the /home/tester directory. So we need to find a way to escalate to tester user.","Enumerating the machine, we see some interesting files owned by tester in /opt:","The problem is, the taskmanage subdomain does not exist. We can hijack the request doing the following:","Create task.sh on ur attacking machine that when ran it creates a reverse connection to us","Spin a python web server on port 80","Set our attacking IP to resolve taskmanage.overflow.htb on overflow's host file","Start netcat listener and wait a minute for tester to connect \uD83D\uDE00","First I created the task.sh in my machine with a bash reverse shell and started a Python web server on port 80:","Also in another terminal started a netcat listener on port 4444.","In Overflow machine we can add the host entry taskmanage.overflow.htb pointing to our machine:","After a minute or two we get a hit in our Python web server and a connection back to our netcat listener!"]},{"l":"Shell as tester","p":["Lets upgrade the tty generating SSH keys:","Create a file with the id_rsa contents in attacker machine and use it to SSH in:"]},{"l":"File encrypt","p":["And the PIN is valid! We’re presented with a name prompt and the program exited with a thank you message.","Back to Ghidra we look at the check_pin function again and spot where the name: is being used and stored. It is stored in local_2c variable which is programmed to allocate 20 bytes only, here is our buffer overflow!","Create the new hash for user caue with password pass123:","EIP was overwritten with 0x35624134. Using msf_pattern_offset we can identify the overflow offset at 44.","First I check the file security flags:","Given the name of the machine, I thought this would be a buffer overflow. So I tried passing varying lengths and characters to the PIN field but just said \"Wrong Pin\". So, let’s bring the file back to our machine so we can reverse it.","Going back to the /opt directory we can access the file_encrypt folder, owned by root but with ACLS to the tester user, and read the README.md:","Here we disassemble the random() function. Next we set a breakpoint at offset 57, where we xor our values. The end result of the xor operation is returned by the function.","Lets open in Ghidra and have a look at the functions! Starting with the check_pin function, maybe we can reverse the code to determine a valid PIN.","Make a copy of /etc/passwd and add our user with root privileges:","Next we encrypt our modified /tmp/passwd file. To do this, I wrote a simple python script:","Now that we know the offset, we’re going to attempt to route the program execution to the encrypt function. To get the address of the function, we run the program in gdb, issue a ctrl-c and dissassemble the function.","Now we run the program until the breakpoint is reached. Once there, we can examine the value at the memory location, which would be 0x8(%ebp) or, written differently, ebp+8.","Now we’re ready to run the file_encrypt program with our overflow.","Our plan is to create a copy of /etc/passwd and add a new root user. We’ll then use the program to encrypt and overwrite the system /etc/passwd with our modified copy.","Running the python script generates a PIN code:","Running the script give us a file called passwd2 which is encrypted:","The code looks fairly straightfoward. The PIN we enter is stored in the local_18 variable and then compared to local_14. If they match, we have the correct PIN. local_14 is generated through the random() function. Let’s look at it:","The function starts at 0x5655585b. Now we can add that to our buffer overflow to overwrite EIP and force us to the encrypt function.","The next step is to find the offset for the EIP register. If we’re able to control the values placed in the register, we can take control of the programs operational flow and redirect it to our advantage.","The other issue is that the return value from the random function is a type long integer. Because our input value in check_pin is a signed int type, we need to cast the return value from random as a signed int, otherwise the values will never match. Python3 does not differentiate between long and int values natively, so to do the conversion we need to include the ctypes import in our code.","The value at that address is the same value passed to local_c. So essentially in our code, we’ll need to xor the final local_c value against the original local_c value.","This is the function that creates the PIN. In theory, we should be able to replicate this code elsewhere and generate a working PIN. We’ll do this in python and run it on the server. There are a few gotcha’s in this function. First, was not able to decompile the first variable correctly, leaving us with in_stack_00000004. We need to identify this value since we will be xor’ing it with the local_c value below.","To get this value, we use gdb to set a breakpoint at the function return, and then we examine the value in memory at that location:","Using pattern_create, we generated a string of 300 characters. We’ll input it using gdb and then extract the EIP value.","We can confirm running the binary in gdb and passing a large amount of characters when it asks for a \"name\":","We will manually encrypt our modified passwd file first prior to passing it through the program. An encrypted value XOR’ed by the same key (0x9b) should give us the original cleartext /etc/passwd. In other words, the encryption program will actually decrypt our passwd file when it overwrites /etc/passwd.","Yes! It is working, and now is asking for the \"Input File\". Going back into Ghidra, we take a closer look at the encrypt function. The program’s purpose is to take a file and encrypt it in a new location. It does this by reading the file and XOR'ing it with 0x9b."]},{"l":"Root"}],[{"l":"Homeless","p":["Name","Homeless: 1","Date release","6 Dec 2017","Author","Creatigon","Link","https://www.vulnhub.com/series/securecode,445/"]},{"l":"Goals","p":["You will be required to break into target server,exploit and root the machine, and retrieve the flag. The flag will contain more information about my private info..","Machine IP: 192.168.26.132"]},{"l":"Recon","p":["Running Nmap we see that there are 2 ports open, 22 SSH and 80 HTTP:"]},{"l":"Port 80","p":["Looking at the website on port 80 I see an interesting thing on top of a image, what seems to be my User-Agent:","Maybe we can inject some code there changing the User-Agent. First thing to check is what framework the website is built on. When trying to access http://192.168.26.132/index.php I got a 200 OK response and the site loads.","So now we know that the website is built on PHP lets try to inject some code.","After trying for a couple minutes, nothing, except XSS, works."]},{"l":"Favicon","p":["Another interesting thing is the webpage icon, it does look weird:","Looking closer http://192.168.26.132/images/favicon.jpg:","Hard to read but if we put the words that are on the top of the image “Cyberdog Sledding Portal” in the User-Agent header it give us a hint to another page.","\uD83E\uDD28 This part of the machine I didn’t like much, very unrealistic."]},{"l":"Upload File","p":["Accessing http://192.168.26.132/myuploader_priv/ we get a file upload form:","Trying to upload a php reverse shell gives me an error saying that the file is too large:","Even trying the smallest RCE in PHP I know ?=$_GET[1]? was being flagged as too large. However, how about this:","It is only 8 bytes!! Uploading the file called test.php works!","Accessing http://192.168.26.132/myuploader_priv/files/test.php lists the files in the current directory:","Lets read that hash file:","It is a hint to the next step."]},{"l":"Sign in","p":["http://192.168.26.132/d5fa314e8577e3a7b8534a014b4dcb221de823ad/","I clicked on “Need hint?” after trying several techniques and failed. It give us the source code of index.php:"]},{"l":"Code Analyses","p":["The authentication mechanism of the form is to check the md5 hashes of the three provided values, compare them and return a valid session in case the hashes are identical. The trick here is that you can’t just pass equal values on the form and get the same md5 hashes as there is a pre-check that validates the input and requires the values of the fields to be different.","So what we need here is to either steal someone else’s session or generate real md5 collisions","The solution is to generate md5 collisions using a collision generator like Python MD5 Collision Library by Stephen Halmor hashclash by Marc Stevens to generate a pair of collisions and attach them to the POST query as binary data."]},{"l":"Generating MD5 Collision","p":["Here is the Python library to use:","https://github.com/thereal1024/python-md5-collision","Now how do we pass this to the web server? The easiest way is using Curl!","Adding the cookie to our PHPSESSION we can access http://192.168.26.132/d5fa314e8577e3a7b8534a014b4dcb221de823ad/admin.php:","From here we have code execution on the machine:","Lets get a reverse shell:"]},{"l":"Shell as WWW-DATA","p":["We are in.","Poking around I find a file called todo.txt in the /home/downfall/ directory:","The hint talks about python.","What we are looking for is a python script with insecure file permissions belonging to the downfall group, or a script where the owner is root and the file is of a different group:","The above screenshot shows that the user downfall (belonging to the downfall group) has write privileges to this file. The files’ contents suggest that this may be a script called via a cron job, and the chances of it being run as root are high.","Connecting the dots from previous enumeration, specifically the contents of the robots.txt file (remember rockyou), and now having a username means that we might have to use the rockyou.txt wordlist on the user downfall and try to brute force the password."]},{"l":"Bruteforce SSH downfall user","p":["The creator of this VM is kind enough to suggest that the password starts with “sec”. Lets generate a wordlist based on rockyou.txt with only words that start with “sec”:","Bruteforce SSH using Hydra:","Found the password:","Ok, lets SSH in as downfall user and password secretlyinlove:"]},{"l":"Way to root","p":["Reading the file .secret_message we get a hint into how escalate to root:","Below I used PSPY to monitor the processes and confirmed that homeless.py is being called from the cronjob with UID 0 (root):","Since homeless.py does not have “execution” permissions and only root can change it, we need to create a new file:","Moved homeless.py to homeless.py.bak.","Created a new file called homeless.py and added a bash reverse shell:","Started a netcat listener on my local machine and wait for the cronjob to trigger:","We are root!"]}],[{"l":"Pipe","p":["Name","/dev/random: Pipe","Date release","2 Oct 2015","Author","Sagi-","Link","https://www.vulnhub.com/entry/devrandom-pipe,124/"]},{"l":"Machine Info","p":["Machine IP: 192.168.26.130"]},{"l":"Start of enumeration","p":["GET requests to http://192.168.26.130/index.php are redirected to index.php and asks for credentials. Changing the request to POST or even something that does not exist like \"GETS\", we can bypass and get the index.php page.","Looking at the source-code we find an interesting JS file:","Accessing http://192.168.26.130/scriptz/ we can find more files.","The file log.php.BAK file seems to be a logger:","Looking back to the index.php source-code we can see the parameters that are submitted in the form:","We now intercept the request for “Show Artist Info” in burp:","Decoding the param value:","It seems that in this case a Info type object is being created. We know that a Log object will invoke the logger file and allow us to write to the webroot. We now attempt to tweak the request so that we can write some data to the webroot via the Log object."]},{"l":"Writing to disk via parameter","p":["Lets attempt to write a simple php web shell to /scriptz/rce.php:","It works! Our rce.php file is there."]},{"l":"Reaching RCE","p":["The remote command execution can be triggered via http://192.168.26.130/scriptz/rce.php?cmd=id"]},{"l":"Reverse Shell","p":["Getting a reverse shell is trivial:"]}],[{"l":"SecureCode1","p":["Name","SecureCode: 1","Date release","23 Feb 2021","Author","sud0root","Link","https://www.vulnhub.com/series/securecode,445/"]},{"l":"Goals","p":["Bypass Authentication → flag1","Obtain Remote Command Execution → flag2","Write your PoC code that chains the exploitation of the discovered vulnerabilities"]},{"l":"Machine Info","p":["Machine IP: 192.168.26.129 Source Code: http://192.168.26.129/source_code.zip"]},{"l":"Analyzing the PHP code","p":["After a long time reading the source code and playing with the web application to understand its logic I finally found something interesting, an SQL injection point.","Vulnerable PHP file ( viewItem.php):","The vulnerability is at line 18:","It is part of a GET request: http://192.168.26.129/item/viewItem.php?id={PAYLOAD}","The id parameter does not have single/double quotes around it which makes it easier for injection."]},{"l":"Extract data from the database via bruteforce","p":["Since we have access to the source code and we know the database and tables names, we can skip the discovery of this part and go straight to data extraction via SQL injection.","File db.sql of the source code provided:","We can start by sending a SQL query to return all entries in the user table that has id_level=1, admin privileges, and check if the first letter of the entry start with “a”. We also add the limit 1 to make sure it will return only one entry, in case there are more then one users with id_level=1.","However, the single and double quotes are being filtered by mysqli_query() function:","One workaround is using the ascii table. So instead of comparing it to the letter “a” we will compare it to “97” and wrap the SQL query into ascii function.","The final query to check if the admin level username starts with letter “a” would look like this:","The GET request look like this:","Response: HTTP/1.1 404 Not Found.","This actually means that the comparison is correct, otherwise we would be redirected to the login page based on the viewItem.php code here:","Line 22 code logic: If a query to an existing id returns true, send a 404 response.","From that we can confirm that the comparison is correct or not based on the response code."]},{"l":"Automate the blind SQL bruteforce","p":["Lets automate this process with a Python script.","Running this script we get the following:","The password give us a hint that we need to reset it before move on."]},{"l":"Forget Password Token","p":["Sometimes when we send a “Forgot my password” request, the web application will create a token and store in the database. Since now we can dump the database via SQL Injection we can retrieve the token generated.","Analyzing the code below, we note that when we reset the password, it will generate a token of length 15. Also note that the function send_email() is leaking the link we need to access to reset the password when we have the token.","Basically what we need to do is:","Reset the password for admin","Adjust our script to dump the token generated for admin","Visit http://192.168.26.129/login/doResetPassword.php?token={TOKEN}","To dump the Token we just need to modify the main() of our script as below:","Running the script we get the following response:","Visit “http://192.168.26.129/login/doResetPassword.php?token=xxtax6edS5U3hch” to reset the admin password!"]},{"l":"Logged as Admin","p":["We have access to admin account. Poking around we see that we can create new items and upload files that are used as the item image."]},{"i":"add-new-item-or-update-item","l":"Add new item OR Update item?","p":["Looking at the code newItem.php we notice the following logic to upload a file:","If the file is not in blacklisted_exts and is in mimes it will be uploaded.","However, looking at updateItem.php code, we noticed that there is no mime type whitelist, only extensions blacklist! Much easier to bypass and upload a malicious file!","Another thing to note is that there is no blacklist for the extension phar.","Phar files can execute PHP code. We could upload the following shell.phar file:","Or could even be more direct to a reverse shell:"]},{"l":"Chaining all together in a Python script","p":["In order to create a script to chain all these vulnerabilities and return a shell we will need to manage a login session so we can use the authenticated cookies to perform other tasks. The final script is as follow:"]},{"l":"Recap of the vuln chain","p":["Reset the admin password","Extract the reset password token via SQL injection in viewItem.php?id","Use the token to set a new password and login to the admin portal via /login/doResetPassword.php, /login/doChangePassword.php and /login/checkLogin.php","Upload a malicious .phar file updating an existing item via /item/updateItem.php","Get a reverse shell via file uploaded at /item/image/shell.phar?cmd=","All we need to do now is start a netcat listener on port 4444 and execute the script."]}],[{"l":"Serial 1","p":["Name","Serial: 1","Date release","20 Aug 2019","Author","sk4","Link","https://www.vulnhub.com/entry/serial-1,349/","Goals Get root permissions and user/root flags.","I started off by downloading the machine from Vulnhub and running it with VmWare."]},{"l":"Recon","p":["The first thing to do is find out what is the IP address of the machine. Since both, my attacking machine and the target machine, are in the same network (NAT) I decided to simply run sudo netdiscover -r 192.168.150.1/24:"]},{"l":"Port Scan","p":["Now that we have an IP address, lets do a port scan using Nmap.","From the Nmap scan we can see only 2 ports open, 22 SSH and 80 HTTP.","Port 22: Running OpenSSH 7.9 Ubuntu 10.","Port 80: HTTP server running Apache 2.4.38.","Lets have a look at the website running on port 80."]},{"i":"port-80---http","l":"Port 80 - HTTP","p":["Browsing to the website on port 80 and I got a greeting message to the user sk4 hinting that they are testing the cookies. I immediately opened the browser console to see if there is anything in there.","This looks like base64, lets decode it:","We can see that it is a PHP serialized object in the cookies. In fact, there are 2 objects references in there. The first one is a User object with username=sk4 and Userwel receives a Welcome empty object.","Deserialization can be dangerous leading to RCE if not implemented correctly. However, we don't have much information on how this website works. Lets run a Gobuster to see if we can find some directories and files."]},{"l":"Gobuster","p":["Running gobuster we find an interesting directory called /backup:","Browsing to that directory we see a bak.zip file we can download.","Downloading and unzipping we get 3 files of what seems to be the source code of the website."]},{"l":"Code Analysis","p":["Analysing the code of the file index.php we can see that it is including user.class.php. Then checking if a cookie user exist and if not creates a new object of User with the value of sk4. So that explains why we were greeted with the name of sk4 whe we access the website the first time. In the line 6, the code logic continues, and if a cookie exists it will be deserialized withou any sanitization. Dangerous!!","Looking at the user.class.php file I noticed the inclusion of the log.class.php which is responsible for the variable $val in the Welcome class.","Looking at the log.class.php code below I noticed the parameter type_log is not assigned any value. Also, the __construct function will be called when the file loads, in this case, whenever the user.class.php is loaded too since it is including this file. The handler function is \"echoing\" the value of $val. So maybe we can modify the cookie to reference the Log class instead of the Welcome and make it read some internal files."]},{"l":"Exploitation","p":["To exploit this deserialization vulnerability we will need to chain the classes so we create a cookie with the object Log and assign the value of the file we would like it to read."]},{"l":"Modification 1","p":["In the log.class.php file we assign a value to the type_log variable. Lets try to read /etc/passwd:"]},{"l":"Modification 2","p":["In the user.class.php we have modify the __construct function to assign new Log() instead of new Welcome() in the $wel variable. We will add one line of code at the end to generate a serialized object using the new settings. The serialized object will be our cookie that we will send to the server and it will return a internal file.","We can test running the index.php and we get our own /etc/passwd file. So this mean it is working.","To generate the cookie we can run user.class.php and it will create a serialized PHP object with the modifications we did previously:"]},{"l":"Reading Local Files","p":["Adding the generated cookie to the browser and refreshing the page we can see the server /etc/passwd file:","Great! So now we reached local file inclusion through PHP object deserialization.","Ok, good, but every time we want to read a file we need to generate a new cookie and refresh the page again. What if we point the type_log variable to our machine so it would include our PHP file."]},{"l":"Remote Code Execution","p":["First we create a simple PHP web shell and call it rce.php:","Use Python to start web server and host the file:","Now all we need to do is to modify the variable type_log to point to our hosted file, generate the cookie, add the cookie to the browser and refresh the page.","Modify the variable","Generating the new cookie","As soon as I added the new cookie in the browser and refreshed the page I got a hit in the Python webserver to fetch the rce.php file.","Now we can run commands using the cmd parameter. Browsing to http://192.168.150.133/index.php?cmd=id outputs the user id:"]},{"l":"Reverse Shell","p":["I will base64 encode a bash reverse shell to execute in the target machine:","Now I can send the following command:","URL encode the spaces:","Start a netcat listener, send the command in the browser, and we have a shell:"]},{"l":"Shell as www-data"},{"l":"Enumeration","p":["Listing directories in the system I found an interesting file that we can read, /credentials.txt.bak:","From here we could either change user to sk4 using its password, or SSH in, both works."]},{"l":"Shell as sk4","p":["Now that we have credentials for user sk4, lets see if he can run any sudo command:","Yes!"]},{"l":"Privilege Escalation to Root","p":["The user sk4 can run vim as sudo. There is a very easy way to escape vim into a shell:","And we are root!"]}],[{"l":"Cracking"},{"l":"Search-That-Hash"},{"l":"Hashcat"},{"l":"Common hashes","p":["-m 0","-m 1000","-m 1500","-m 1600","-m 1800","-m 300","-m 400","-m 500","DES(unix)","Hash","md5 raw","md5(apr)","md5crypt","Mode","Mysql4.0/5","NTLM","sha512crypt","wordpress"]},{"l":"Custom wordlist","p":["Create a custom wordlist based on words and hashcat rules."]},{"l":"John The Ripper"},{"l":"Linux passwords"},{"l":"Crack Files"},{"l":"ZIP files"},{"i":"ssh-id_rsa","l":"SSH (id_rsa)"},{"l":"PDF"},{"i":"pgp-message--key","l":"PGP MESSAGE & KEY","p":["Identification & Syntax","Import the PGP PRIVATE KEY into our machine:","Crack:","After importing the private key, we can use it to decode PGP messages:"]},{"l":"PFX","p":["Using John (FASTER):","Using pkcs12:","Now we can import the .pfx certificate using the password on Firefox to access internal resources."]}],[{"l":"XSS"},{"i":"reflected-xss---basic","l":"Reflected XSS - Basic"},{"i":"reflected-xss---filter-evasion","l":"Reflected XSS - Filter Evasion"},{"l":"Stored XSS"},{"l":"Data grabber for XSS","p":["Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page.","Write the collected data into a file."]},{"l":"Javascript keylogger","p":["Another way to collect sensitive data is to set a Javascript keylogger."]},{"l":"Password changer","p":["Redirects the user to a password change when it visits the page."]},{"l":"SSRF via XSS"},{"l":"Load external scripts via JS","p":["Send the payload:","Script hosted on attacker machine to get local files, and POST back to attacker:"]},{"l":"Local files using PHP redirection","p":["Send the payload:","File hosted on attacker machine - Redirect to local file:","Many more payloads at PayloadAllTheThings"]}]]